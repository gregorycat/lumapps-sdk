name: CI

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - master

jobs:
  Lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout branch
        uses: actions/checkout@v2.3.4

      - name: Setup Python 3.6 üêç
        uses: actions/setup-python@v2.1.4
        with:
          python-version: 3.6

      - name: Install Poetry
        uses: snok/install-poetry@v1.1.1

      - uses: actions/cache@v1
        name: Cache Poetry deps
        with:
          path: ~/.cache/pypoetry/virtualenvs
          key: lint-${{ runner.os }}-poetry-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            lint-${{ runner.os }}-poetry-

      - name: Set Poetry config
        run: |
          poetry config virtualenvs.in-project false
          poetry config virtualenvs.path ~/.cache/poetry/virtualenvs

      - name: Install Dependencies
        run: poetry install -v
        if: steps.cache.outputs.cache-hit != 'true'

      - name: Check the code quality
        run: make check-code-quality

      - name: Check if the code is correctly typed
        run: make check-types

  Tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8]

    steps:
      - name: Checkout branch
        uses: actions/checkout@v2.3.4

      - name: Setup Python ${{ matrix.python-version }} üêç
        uses: actions/setup-python@v2.1.4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1.1.1

      - uses: actions/cache@v1
        name: Cache Poetry deps
        with:
          path: ~/.cache/pypoetry/virtualenvs
          key: tests-${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            tests-${{ runner.os }}-${{ matrix.python-version }}-poetry-

      - name: Set Poetry config
        run: |
          poetry config virtualenvs.in-project false
          poetry config virtualenvs.path ~/.cache/poetry/virtualenvs

      - name: Install Dependencies
        run: poetry install -v
        if: steps.cache.outputs.cache-hit != 'true'

      - name: Run the test suite
        run: make test

      - name: Upload coverage to Codecov
        if: matrix.python-version == 3.7
        uses: codecov/codecov-action@v1.0.15
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          yml: codecov.yml
          fail_ci_if_error: true
