{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Lumapps SDK \u00a4 LumApps SDK is a set of tools to manipulate the LumApps API This includes: A client that support all the routes of the API (located in folder lumapps) A set of helper classes to easily manipulate LumApps elements as Python Objects and classes (folder lumapps/helpers) Installation \u00a4 pip install lumapps-sdk Getting started \u00a4 Get your token LumApps supports multiple ways of authentication. The fastest one to implement is the following: Get your token by logging to your LumApps account. Go to https://sites.lumapps.com and authenticate. Once connected, open the javascript console of your browser and run: var instance = window . location . pathname . split ( '/' ); instance = instance [ 1 ] == \"a\" ? instance [ 3 ] : instance [ 1 ] fetch ( window . location . origin + \"/service/init?customerHost=\" + window . location . host + \"&instanceSlug=\" + instance + \"& slug=\" ). then ( data =>{ return data . json ()}). then ( res => { console . log ( res . token )}) This will generate your personal LumApps token that will be active for 60 minutes, and that we will use in the following steps Authenticate from lumapps.api import BaseClient token = \"MY TOKEN\" client = BaseClient ( token = token ) Make your first API call Let's display the full name of a registered user in lumapps user_email = \"YOUR EMAIL\" usr = api . get_call ( \"user/get\" , email = user_email ) print ( \"Hello {} \" . format ( usr [ \"fullName\" ])) Documentation \u00a4 The SDK documentation is available here . Code convention \u00a4 Docstring in PEP 484 type annotations format adapted to python 2.7 using comments. How to get help, contribute, or provide feedback \u00a4 Please refer to our contributing guidelines . Copyright and license \u00a4 LumApps SDK is released under the MIT license .","title":"Overview"},{"location":"#lumapps-sdk","text":"LumApps SDK is a set of tools to manipulate the LumApps API This includes: A client that support all the routes of the API (located in folder lumapps) A set of helper classes to easily manipulate LumApps elements as Python Objects and classes (folder lumapps/helpers)","title":"Lumapps SDK"},{"location":"#installation","text":"pip install lumapps-sdk","title":"Installation"},{"location":"#getting-started","text":"Get your token LumApps supports multiple ways of authentication. The fastest one to implement is the following: Get your token by logging to your LumApps account. Go to https://sites.lumapps.com and authenticate. Once connected, open the javascript console of your browser and run: var instance = window . location . pathname . split ( '/' ); instance = instance [ 1 ] == \"a\" ? instance [ 3 ] : instance [ 1 ] fetch ( window . location . origin + \"/service/init?customerHost=\" + window . location . host + \"&instanceSlug=\" + instance + \"& slug=\" ). then ( data =>{ return data . json ()}). then ( res => { console . log ( res . token )}) This will generate your personal LumApps token that will be active for 60 minutes, and that we will use in the following steps Authenticate from lumapps.api import BaseClient token = \"MY TOKEN\" client = BaseClient ( token = token ) Make your first API call Let's display the full name of a registered user in lumapps user_email = \"YOUR EMAIL\" usr = api . get_call ( \"user/get\" , email = user_email ) print ( \"Hello {} \" . format ( usr [ \"fullName\" ]))","title":"Getting started"},{"location":"#documentation","text":"The SDK documentation is available here .","title":"Documentation"},{"location":"#code-convention","text":"Docstring in PEP 484 type annotations format adapted to python 2.7 using comments.","title":"Code convention"},{"location":"#how-to-get-help-contribute-or-provide-feedback","text":"Please refer to our contributing guidelines .","title":"How to get help, contribute, or provide feedback"},{"location":"#copyright-and-license","text":"LumApps SDK is released under the MIT license .","title":"Copyright and license"},{"location":"CONTRIBUTING/","text":"Contributing \u00a4 Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. Environment setup \u00a4 First install dependencies and setup pre-commits hooks make setup You can run make help to see all available actions ! Adding a new dependency \u00a4 To add a dependency use poetry poetry add <dependency> Dev \u00a4 Code \u00a4 First open an issue to discuss the matter before coding. When your idea has been approved, create a new branch git checkout -b <new_branch_name> and open a Pull Request. Before commiting you can run tests and type checks via the commands make check make test Commits format \u00a4 Commits format is enforced according to the tool https://github.com/lumapps/commit-message-validator Each commit message consists of a header, a body and a footer. The header has a special format that includes a type, a scope and a subject: <type>(<scope>): <subject> <BLANK LINE> <body> <BLANK LINE> <footer> The first line of the commit message (the \"Subject\") cannot be longer than 70 characters. Any other line of the commit message cannot be longer 100 characters! The body and footer are optional, but depends on the type, information can be mandatory. This allows the message to be easier to read on github as well as in various git tools. Example: feat(toto-service): provide toto for all Before we had to do another thing. There was this and this problem. Now, by using \"toto\", it's simpler and the problems are managed. Type Must be one of the following: feat: A new feature fix: A bug fix docs: Documentation only changes lint: Changes that do not affect the meaning of the code (white-space, formatting, missing semicolons, etc) refactor: A code change that neither fixes a bug or adds a feature test: Adding missing tests or correcting existing tests chore: Changes to the build process or auxiliary tools and libraries such as distribution generation More: For more informations about the commit format see here Note: A pre-commit hook as well as an action will check that for you and PR need to respect that format to be merged. Documentation \u00a4 Additionnaly to edit the documentation you can add/modify markdown files in the docs folder. You can preview the doc by running make docs-serve Then to deploy the doc you can run make doc-deploy Deploy a new version (admins) \u00a4 Regular release \u00a4 Simply create and push the tag X.Y.Z on master. git tag X.Y.Z git push origin master X.Y.Z This will create a draft release, you'll then need to publish it. Finally the CI will release the corresponding package version on Pypi, bump the version and publish the doc for you. Beta release \u00a4 Doing a beta release is a bit different, we do not use tag automation for the time being. Simply publish a pre-release on github with the correct tag (eg, 1.1.3b1) and this will trigger the publication on Pypi","title":"Contributing"},{"location":"CONTRIBUTING/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.","title":"Contributing"},{"location":"CONTRIBUTING/#environment-setup","text":"First install dependencies and setup pre-commits hooks make setup You can run make help to see all available actions !","title":"Environment setup"},{"location":"CONTRIBUTING/#adding-a-new-dependency","text":"To add a dependency use poetry poetry add <dependency>","title":"Adding a new dependency"},{"location":"CONTRIBUTING/#dev","text":"","title":"Dev"},{"location":"CONTRIBUTING/#code","text":"First open an issue to discuss the matter before coding. When your idea has been approved, create a new branch git checkout -b <new_branch_name> and open a Pull Request. Before commiting you can run tests and type checks via the commands make check make test","title":"Code"},{"location":"CONTRIBUTING/#commits-format","text":"Commits format is enforced according to the tool https://github.com/lumapps/commit-message-validator Each commit message consists of a header, a body and a footer. The header has a special format that includes a type, a scope and a subject: <type>(<scope>): <subject> <BLANK LINE> <body> <BLANK LINE> <footer> The first line of the commit message (the \"Subject\") cannot be longer than 70 characters. Any other line of the commit message cannot be longer 100 characters! The body and footer are optional, but depends on the type, information can be mandatory. This allows the message to be easier to read on github as well as in various git tools. Example: feat(toto-service): provide toto for all Before we had to do another thing. There was this and this problem. Now, by using \"toto\", it's simpler and the problems are managed. Type Must be one of the following: feat: A new feature fix: A bug fix docs: Documentation only changes lint: Changes that do not affect the meaning of the code (white-space, formatting, missing semicolons, etc) refactor: A code change that neither fixes a bug or adds a feature test: Adding missing tests or correcting existing tests chore: Changes to the build process or auxiliary tools and libraries such as distribution generation More: For more informations about the commit format see here Note: A pre-commit hook as well as an action will check that for you and PR need to respect that format to be merged.","title":"Commits format"},{"location":"CONTRIBUTING/#documentation","text":"Additionnaly to edit the documentation you can add/modify markdown files in the docs folder. You can preview the doc by running make docs-serve Then to deploy the doc you can run make doc-deploy","title":"Documentation"},{"location":"CONTRIBUTING/#deploy-a-new-version-admins","text":"","title":"Deploy a new version (admins)"},{"location":"CONTRIBUTING/#regular-release","text":"Simply create and push the tag X.Y.Z on master. git tag X.Y.Z git push origin master X.Y.Z This will create a draft release, you'll then need to publish it. Finally the CI will release the corresponding package version on Pypi, bump the version and publish the doc for you.","title":"Regular release"},{"location":"CONTRIBUTING/#beta-release","text":"Doing a beta release is a bit different, we do not use tag automation for the time being. Simply publish a pre-release on github with the correct tag (eg, 1.1.3b1) and this will trigger the publication on Pypi","title":"Beta release"},{"location":"LICENSE/","text":"The MIT License (MIT) \u00a4 Copyright \u00a9 2020 LumApps Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u201cSoftware\u201d), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Copyright and license"},{"location":"LICENSE/#the-mit-license-mit","text":"Copyright \u00a9 2020 LumApps Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u201cSoftware\u201d), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"The MIT License (MIT)"},{"location":"authentication/","text":"Authentication \u00a4 The first thing you'll need in order for you to be able to use the LumApps Api's is a valid token. You can see them here The LumApps sdk can help you when using a service account or a regular token, all you have to do is to give the sdk the credentials infos and the subsequent calls made by the tool will be authenticated using those credentials. Note : Be sure to target the right lumapps environment, by default the sdk use site.lumapps.com as an environment. If your env is different (eg, sites-ms.lumapps.com) you can precise it like so: from lumapps.api.base_client import BaseClient api_info = { \"base_url\" : \"https://sites-ms.lumapps.com\" } client = BaseClient ( token = \"<your_token>\" , api_info = api_info ) Using a regular token \u00a4 To authenticate with a regular, short lived token, instanciate the sdk like so: from lumapps.api.base_client import BaseClient client = BaseClient ( token = \"<your_token>\" ) Using an authorized service account \u00a4 By default a service account does not allows you to contact all LumApps API endpoints, to do so you need to get a token as a given user and then use this token to authenticate the requests An example with curl The flow is as follow: With your service account get a google access token To know how to get this token with curl and you service account follow this tutorial For an extended documentation on that process you can follow the google documentation Use this token as the bearer token to call the user/get endpoint curl -s -X GET https:// /_ah/api/lumsites/v1/user/getToken?customerId= &email= \\ -H \"Accept: application/json\" \\ -H \"Content-Type: application/json\" \\ -H \"Authorization: Bearer \" Use the returned LumApps access token to authenticate your subsequent requests to LumApps Api's. For instance you can call the user/get endpoint: curl -s -X GET https:// /_ah/api/lumsites/v1/user/get \\ -H \"Accept: application/json\" \\ -H \"Content-Type: application/json\" \\ -H \"Authorization: Bearer \" An example with Postman The flow is the same as with curl but to do it with postman there are some specificities and that's why we provide a collection that illustrate it . This collection uses postman variables and you have to set some to use it: sa_private_key : Private of the service account sa_email : Service account email lumapps_base_env_url : The base url of the LumApps env (eg, https://sites.lumapps.com) You'll also have to execute in order, the requests are numbered so make sure to execute them from 1 to 4. With the LumApps sdk The sdk BaseClient offers two methods to help with that `get_new_client_as` and `get_new_client_as_using_dwd` that allows you to get a new BaseClient correctly authenticated. from lumapps.api.base_client import BaseClient my_service_account = { ... } my_platform_id = \"<your_plaform_id>\" user_to_authenticate_on_behalf_of = \"<user_email>\" client = BaseClient ( auth_info = my_service_account ) . get_new_client_as ( user_email = user_to_authenticate_on_behalf_of , customer = platform_id ) Note : The LumApps bearer token you get in that case extends to 24h instead of 1h.","title":"Authentication"},{"location":"authentication/#authentication","text":"The first thing you'll need in order for you to be able to use the LumApps Api's is a valid token. You can see them here The LumApps sdk can help you when using a service account or a regular token, all you have to do is to give the sdk the credentials infos and the subsequent calls made by the tool will be authenticated using those credentials. Note : Be sure to target the right lumapps environment, by default the sdk use site.lumapps.com as an environment. If your env is different (eg, sites-ms.lumapps.com) you can precise it like so: from lumapps.api.base_client import BaseClient api_info = { \"base_url\" : \"https://sites-ms.lumapps.com\" } client = BaseClient ( token = \"<your_token>\" , api_info = api_info )","title":"Authentication"},{"location":"authentication/#using-a-regular-token","text":"To authenticate with a regular, short lived token, instanciate the sdk like so: from lumapps.api.base_client import BaseClient client = BaseClient ( token = \"<your_token>\" )","title":"Using a regular token"},{"location":"authentication/#using-an-authorized-service-account","text":"By default a service account does not allows you to contact all LumApps API endpoints, to do so you need to get a token as a given user and then use this token to authenticate the requests An example with curl The flow is as follow: With your service account get a google access token To know how to get this token with curl and you service account follow this tutorial For an extended documentation on that process you can follow the google documentation Use this token as the bearer token to call the user/get endpoint curl -s -X GET https:// /_ah/api/lumsites/v1/user/getToken?customerId= &email= \\ -H \"Accept: application/json\" \\ -H \"Content-Type: application/json\" \\ -H \"Authorization: Bearer \" Use the returned LumApps access token to authenticate your subsequent requests to LumApps Api's. For instance you can call the user/get endpoint: curl -s -X GET https:// /_ah/api/lumsites/v1/user/get \\ -H \"Accept: application/json\" \\ -H \"Content-Type: application/json\" \\ -H \"Authorization: Bearer \" An example with Postman The flow is the same as with curl but to do it with postman there are some specificities and that's why we provide a collection that illustrate it . This collection uses postman variables and you have to set some to use it: sa_private_key : Private of the service account sa_email : Service account email lumapps_base_env_url : The base url of the LumApps env (eg, https://sites.lumapps.com) You'll also have to execute in order, the requests are numbered so make sure to execute them from 1 to 4. With the LumApps sdk The sdk BaseClient offers two methods to help with that `get_new_client_as` and `get_new_client_as_using_dwd` that allows you to get a new BaseClient correctly authenticated. from lumapps.api.base_client import BaseClient my_service_account = { ... } my_platform_id = \"<your_plaform_id>\" user_to_authenticate_on_behalf_of = \"<user_email>\" client = BaseClient ( auth_info = my_service_account ) . get_new_client_as ( user_email = user_to_authenticate_on_behalf_of , customer = platform_id ) Note : The LumApps bearer token you get in that case extends to 24h instead of 1h.","title":"Using an authorized service account"},{"location":"base_client/","text":"lumapps.api.base_client.BaseClient \u00a4 __init__ ( self , auth_info = None , api_info = None , user = None , token = None , token_getter = None , prune = False , no_verify = False , proxy_info = None ) special \u00a4 Parameters: Name Type Description Default auth_info Optional[Dict[str, Any]] When specified, a service account or a web auth JSON dict. None api_info Optional[Dict[str, Any]] When specified, a JSON dict containing the description of your api. Defaults to LumApps API. None user Optional[str] Email of user on behalf of whom to authenticate using domain-wide delegation. None token Optional[str] A bearer access token. None token_getter Optional[Callable[[], Tuple[str, int]]] A bearer access token getter function. None prune bool Whether or not to use FILTERS to prune LumApps API responses. False no_verify bool Disables SSL verification. False proxy_info Optional[Dict[str, Any]] When specified, a JSON dict with proxy parameters. None Source code in lumapps/api/base_client.py 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 def __init__ ( self , auth_info : Optional [ Dict [ str , Any ]] = None , api_info : Optional [ Dict [ str , Any ]] = None , user : Optional [ str ] = None , token : Optional [ str ] = None , token_getter : Optional [ Callable [[], Tuple [ str , int ]]] = None , prune : bool = False , no_verify : bool = False , proxy_info : Optional [ Dict [ str , Any ]] = None , ): \"\"\" Args: auth_info: When specified, a service account or a web auth JSON dict. api_info: When specified, a JSON dict containing the description of your api. Defaults to LumApps API. user: Email of user on behalf of whom to authenticate using domain-wide delegation. token: A bearer access token. token_getter: A bearer access token getter function. prune: Whether or not to use FILTERS to prune LumApps API responses. no_verify: Disables SSL verification. proxy_info: When specified, a JSON dict with proxy parameters. \"\"\" self . _token_expiry = 0 self . no_verify = no_verify self . proxy_info = proxy_info self . prune = prune self . _auth_info = auth_info self . _token = None self . _endpoints = None self . _client = None self . _headers : dict = {} if api_info is None : api_info = {} api_info . setdefault ( \"name\" , LUMAPPS_NAME ) api_info . setdefault ( \"version\" , LUMAPPS_VERSION ) api_info . setdefault ( \"base_url\" , LUMAPPS_BASE_URL ) api_info . setdefault ( \"scopes\" , LUMAPPS_SCOPE ) self . api_info = api_info api_name = api_info [ \"name\" ] self . _scope = \" \" . join ( api_info [ \"scopes\" ]) api_ver = api_info [ \"version\" ] prefix = \"\" if api_name in GOOGLE_APIS else \"/_ah/api\" self . _api_url = f \" { prefix } / { api_name } / { api_ver } \" self . _discovery_url = ( f \" { self . base_url }{ prefix } /discovery/v1/apis/ { api_name } / { api_ver } /rest\" ) self . token_getter = token_getter self . user = user self . token = token self . cursor = None get_call ( self , * name_parts , ** params ) \u00a4 Generic function to call a lumapps endpoint Parameters: Name Type Description Default *name_parts Endpoint, eg user/get or \"user\", \"get\" () **params Parameters of the call {} Returns: Type Description Optional[Union[Dict[str, Any], List[Dict[str, Any]]]] Object or objects returned by the endpoint call. Source code in lumapps/api/base_client.py 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 def get_call ( self , * name_parts , ** params ) -> Union [ Dict [ str , Any ], List [ Dict [ str , Any ]], None ]: \"\"\"Generic function to call a lumapps endpoint Args: *name_parts: Endpoint, eg user/get or \"user\", \"get\" **params: Parameters of the call Returns: Object or objects returned by the endpoint call. Example: List feedtypes in LumApps: -> GET https://.../_ah/api/lumsites/v1/feedtype/list With this endpoint: >>> feedtypes = get_call(\"feedtype/list\") >>> print(feedtypes) \"\"\" name_parts = _parse_endpoint_parts ( name_parts ) items : List [ dict ] = [] self . cursor = cursor = params . pop ( \"cursor\" , None ) body = self . _pop_body ( params ) while True : if cursor : if body is not None : body [ \"cursor\" ] = cursor else : params [ \"cursor\" ] = cursor response = self . _call ( name_parts , params , body ) if response is None : return None more = response . get ( \"more\" ) response_items = response . get ( \"items\" ) if more : if response_items : self . cursor = cursor = response [ \"cursor\" ] items . extend ( response_items ) else : # No results but a more field set to true ... # ie, the api return something wrong self . cursor = cursor = None return self . _prune ( name_parts , items ) else : # No more result to get if response_items : self . cursor = cursor = None items . extend ( response_items ) return self . _prune ( name_parts , items ) else : # No results, return self . cursor = cursor = None # special case of return [] if more is False else self . _prune ( name_parts , response ) get_new_client_as ( self , user_email , customer_id = None ) \u00a4 Get a new BaseClient using an authorized client account by obtaining a token using the user/getToken endpoint. Parameters: Name Type Description Default user_email str User you want to authenticate on behalf of required customer_id Optional[str] Id of the LumApps customer the user belong to None Returns: Type Description BaseClient BaseClient: A new instance of the BaseClient correctly authenticated. Source code in lumapps/api/base_client.py 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 def get_new_client_as ( self , user_email : str , customer_id : Optional [ str ] = None ) -> \"BaseClient\" : \"\"\" Get a new BaseClient using an authorized client account by obtaining a token using the user/getToken endpoint. Args: user_email (str): User you want to authenticate on behalf of customer_id (str): Id of the LumApps customer the user belong to Returns: BaseClient: A new instance of the BaseClient correctly authenticated. \"\"\" client = BaseClient ( auth_info = self . _auth_info , api_info = self . api_info , no_verify = self . no_verify , proxy_info = self . proxy_info , prune = self . prune , ) token_infos : Any = client . get_call ( \"user/getToken\" , customerId = customer_id , email = user_email ) token = token_infos [ \"accessToken\" ] return BaseClient ( api_info = self . api_info , token = token , user = user_email , no_verify = self . no_verify , proxy_info = self . proxy_info , prune = self . prune , ) get_new_client_as_using_dwd ( self , user_email ) \u00a4 Get a new BaseClient using domain-wide delegation Source code in lumapps/api/base_client.py 223 224 225 226 227 228 229 230 231 232 def get_new_client_as_using_dwd ( self , user_email : str ) -> \"BaseClient\" : \"\"\" Get a new BaseClient using domain-wide delegation \"\"\" return BaseClient ( auth_info = self . _auth_info , api_info = self . api_info , user = user_email , no_verify = self . no_verify , proxy_info = self . proxy_info , prune = self . prune , ) iter_call ( self , * name_parts , ** params ) \u00a4 Parameters: Name Type Description Default *name_parts Endpoint, eg user/get or \"user\", \"get\" () **params Parameters of the call {} Yields Objects returned by the endpoint call Source code in lumapps/api/base_client.py 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 def iter_call ( self , * name_parts , ** params ) -> Generator [ Union [ Dict [ str , Any ], List [ Dict [ str , Any ]]], Union [ Dict [ str , Any ], List [ Dict [ str , Any ]]], None , ]: \"\"\" Args: *name_parts: Endpoint, eg user/get or \"user\", \"get\" **params: Parameters of the call Yields: Objects returned by the endpoint call Example: List feedtypes in LumApps: -> GET https://.../_ah/api/lumsites/v1/feedtype/list With this endpoint: >>> feedtypes = iter_call(\"feedtype/list\") >>> for feedtype in feedtypes: print(feedtype) \"\"\" name_parts = _parse_endpoint_parts ( name_parts ) self . cursor = cursor = params . pop ( \"cursor\" , None ) body = self . _pop_body ( params ) while True : if cursor : if body is not None : body [ \"cursor\" ] = cursor else : params [ \"cursor\" ] = cursor response = self . _call ( name_parts , params , body ) more = response . get ( \"more\" ) items = response . get ( \"items\" ) if more : if items : # Yield the results and continue the loop self . cursor = cursor = response [ \"cursor\" ] for item in items : yield self . _prune ( name_parts , item ) else : # No results but a more field set to true ... # ie, the api return something wrong self . cursor = cursor = None return else : # No more result to get if items : # Yield the last results and then return self . cursor = cursor = None for item in items : yield self . _prune ( name_parts , item ) else : return else : # No results, return self . cursor = cursor = None return","title":"Base Client"},{"location":"base_client/#lumapps.api.base_client.BaseClient","text":"","title":"BaseClient"},{"location":"base_client/#lumapps.api.base_client.BaseClient.__init__","text":"Parameters: Name Type Description Default auth_info Optional[Dict[str, Any]] When specified, a service account or a web auth JSON dict. None api_info Optional[Dict[str, Any]] When specified, a JSON dict containing the description of your api. Defaults to LumApps API. None user Optional[str] Email of user on behalf of whom to authenticate using domain-wide delegation. None token Optional[str] A bearer access token. None token_getter Optional[Callable[[], Tuple[str, int]]] A bearer access token getter function. None prune bool Whether or not to use FILTERS to prune LumApps API responses. False no_verify bool Disables SSL verification. False proxy_info Optional[Dict[str, Any]] When specified, a JSON dict with proxy parameters. None Source code in lumapps/api/base_client.py 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 def __init__ ( self , auth_info : Optional [ Dict [ str , Any ]] = None , api_info : Optional [ Dict [ str , Any ]] = None , user : Optional [ str ] = None , token : Optional [ str ] = None , token_getter : Optional [ Callable [[], Tuple [ str , int ]]] = None , prune : bool = False , no_verify : bool = False , proxy_info : Optional [ Dict [ str , Any ]] = None , ): \"\"\" Args: auth_info: When specified, a service account or a web auth JSON dict. api_info: When specified, a JSON dict containing the description of your api. Defaults to LumApps API. user: Email of user on behalf of whom to authenticate using domain-wide delegation. token: A bearer access token. token_getter: A bearer access token getter function. prune: Whether or not to use FILTERS to prune LumApps API responses. no_verify: Disables SSL verification. proxy_info: When specified, a JSON dict with proxy parameters. \"\"\" self . _token_expiry = 0 self . no_verify = no_verify self . proxy_info = proxy_info self . prune = prune self . _auth_info = auth_info self . _token = None self . _endpoints = None self . _client = None self . _headers : dict = {} if api_info is None : api_info = {} api_info . setdefault ( \"name\" , LUMAPPS_NAME ) api_info . setdefault ( \"version\" , LUMAPPS_VERSION ) api_info . setdefault ( \"base_url\" , LUMAPPS_BASE_URL ) api_info . setdefault ( \"scopes\" , LUMAPPS_SCOPE ) self . api_info = api_info api_name = api_info [ \"name\" ] self . _scope = \" \" . join ( api_info [ \"scopes\" ]) api_ver = api_info [ \"version\" ] prefix = \"\" if api_name in GOOGLE_APIS else \"/_ah/api\" self . _api_url = f \" { prefix } / { api_name } / { api_ver } \" self . _discovery_url = ( f \" { self . base_url }{ prefix } /discovery/v1/apis/ { api_name } / { api_ver } /rest\" ) self . token_getter = token_getter self . user = user self . token = token self . cursor = None","title":"__init__()"},{"location":"base_client/#lumapps.api.base_client.BaseClient.get_call","text":"Generic function to call a lumapps endpoint Parameters: Name Type Description Default *name_parts Endpoint, eg user/get or \"user\", \"get\" () **params Parameters of the call {} Returns: Type Description Optional[Union[Dict[str, Any], List[Dict[str, Any]]]] Object or objects returned by the endpoint call. Source code in lumapps/api/base_client.py 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 def get_call ( self , * name_parts , ** params ) -> Union [ Dict [ str , Any ], List [ Dict [ str , Any ]], None ]: \"\"\"Generic function to call a lumapps endpoint Args: *name_parts: Endpoint, eg user/get or \"user\", \"get\" **params: Parameters of the call Returns: Object or objects returned by the endpoint call. Example: List feedtypes in LumApps: -> GET https://.../_ah/api/lumsites/v1/feedtype/list With this endpoint: >>> feedtypes = get_call(\"feedtype/list\") >>> print(feedtypes) \"\"\" name_parts = _parse_endpoint_parts ( name_parts ) items : List [ dict ] = [] self . cursor = cursor = params . pop ( \"cursor\" , None ) body = self . _pop_body ( params ) while True : if cursor : if body is not None : body [ \"cursor\" ] = cursor else : params [ \"cursor\" ] = cursor response = self . _call ( name_parts , params , body ) if response is None : return None more = response . get ( \"more\" ) response_items = response . get ( \"items\" ) if more : if response_items : self . cursor = cursor = response [ \"cursor\" ] items . extend ( response_items ) else : # No results but a more field set to true ... # ie, the api return something wrong self . cursor = cursor = None return self . _prune ( name_parts , items ) else : # No more result to get if response_items : self . cursor = cursor = None items . extend ( response_items ) return self . _prune ( name_parts , items ) else : # No results, return self . cursor = cursor = None # special case of return [] if more is False else self . _prune ( name_parts , response )","title":"get_call()"},{"location":"base_client/#lumapps.api.base_client.BaseClient.get_new_client_as","text":"Get a new BaseClient using an authorized client account by obtaining a token using the user/getToken endpoint. Parameters: Name Type Description Default user_email str User you want to authenticate on behalf of required customer_id Optional[str] Id of the LumApps customer the user belong to None Returns: Type Description BaseClient BaseClient: A new instance of the BaseClient correctly authenticated. Source code in lumapps/api/base_client.py 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 def get_new_client_as ( self , user_email : str , customer_id : Optional [ str ] = None ) -> \"BaseClient\" : \"\"\" Get a new BaseClient using an authorized client account by obtaining a token using the user/getToken endpoint. Args: user_email (str): User you want to authenticate on behalf of customer_id (str): Id of the LumApps customer the user belong to Returns: BaseClient: A new instance of the BaseClient correctly authenticated. \"\"\" client = BaseClient ( auth_info = self . _auth_info , api_info = self . api_info , no_verify = self . no_verify , proxy_info = self . proxy_info , prune = self . prune , ) token_infos : Any = client . get_call ( \"user/getToken\" , customerId = customer_id , email = user_email ) token = token_infos [ \"accessToken\" ] return BaseClient ( api_info = self . api_info , token = token , user = user_email , no_verify = self . no_verify , proxy_info = self . proxy_info , prune = self . prune , )","title":"get_new_client_as()"},{"location":"base_client/#lumapps.api.base_client.BaseClient.get_new_client_as_using_dwd","text":"Get a new BaseClient using domain-wide delegation Source code in lumapps/api/base_client.py 223 224 225 226 227 228 229 230 231 232 def get_new_client_as_using_dwd ( self , user_email : str ) -> \"BaseClient\" : \"\"\" Get a new BaseClient using domain-wide delegation \"\"\" return BaseClient ( auth_info = self . _auth_info , api_info = self . api_info , user = user_email , no_verify = self . no_verify , proxy_info = self . proxy_info , prune = self . prune , )","title":"get_new_client_as_using_dwd()"},{"location":"base_client/#lumapps.api.base_client.BaseClient.iter_call","text":"Parameters: Name Type Description Default *name_parts Endpoint, eg user/get or \"user\", \"get\" () **params Parameters of the call {} Yields Objects returned by the endpoint call Source code in lumapps/api/base_client.py 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 def iter_call ( self , * name_parts , ** params ) -> Generator [ Union [ Dict [ str , Any ], List [ Dict [ str , Any ]]], Union [ Dict [ str , Any ], List [ Dict [ str , Any ]]], None , ]: \"\"\" Args: *name_parts: Endpoint, eg user/get or \"user\", \"get\" **params: Parameters of the call Yields: Objects returned by the endpoint call Example: List feedtypes in LumApps: -> GET https://.../_ah/api/lumsites/v1/feedtype/list With this endpoint: >>> feedtypes = iter_call(\"feedtype/list\") >>> for feedtype in feedtypes: print(feedtype) \"\"\" name_parts = _parse_endpoint_parts ( name_parts ) self . cursor = cursor = params . pop ( \"cursor\" , None ) body = self . _pop_body ( params ) while True : if cursor : if body is not None : body [ \"cursor\" ] = cursor else : params [ \"cursor\" ] = cursor response = self . _call ( name_parts , params , body ) more = response . get ( \"more\" ) items = response . get ( \"items\" ) if more : if items : # Yield the results and continue the loop self . cursor = cursor = response [ \"cursor\" ] for item in items : yield self . _prune ( name_parts , item ) else : # No results but a more field set to true ... # ie, the api return something wrong self . cursor = cursor = None return else : # No more result to get if items : # Yield the last results and then return self . cursor = cursor = None for item in items : yield self . _prune ( name_parts , item ) else : return else : # No results, return self . cursor = cursor = None return","title":"iter_call()"},{"location":"environment/","text":"Environment \u00a4 As your LumApps platform can be on a specific environment you'll need to give the ApiClient the correct base url in order for it to work correctly. By default the ApiClient uses https://sites.lumapps.com . To use another base url (you can find more informations about those url here ) you have to do: from lumapps.api.client import ApiClient client = ApiClient ( api_info = { \"base_url\" : < my_base_url > })","title":"Environment"},{"location":"environment/#environment","text":"As your LumApps platform can be on a specific environment you'll need to give the ApiClient the correct base url in order for it to work correctly. By default the ApiClient uses https://sites.lumapps.com . To use another base url (you can find more informations about those url here ) you have to do: from lumapps.api.client import ApiClient client = ApiClient ( api_info = { \"base_url\" : < my_base_url > })","title":"Environment"},{"location":"lumapps_api_client/","text":"__init__ ( self , customer_id , instance_id , * args , * , cache = None , dry_run = False , ** kwargs ) special \u00a4 Create a LumAppsClient associated to a particular LumApps platform and site Parameters: Name Type Description Default customer_id str The id of the platform you target required instance_id Optional[str] The id of the instance you target required args The args to pass to the BaseClient () cache Optional[Any] The cache to use None dry_run bool Whether to run in dry_run mode or not. This will avoid saving things when callings save endpoints False kwargs The kwargs to pass to the BaseClient {} Source code in lumapps/api/client.py 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 def __init__ ( self , customer_id : str , instance_id : Optional [ str ], * args , cache : Optional [ Any ] = None , dry_run : bool = False , ** kwargs , ): \"\"\" Create a LumAppsClient associated to a particular LumApps platform and site Args: customer_id: The id of the platform you target instance_id: The id of the instance you target args: The args to pass to the BaseClient cache: The cache to use dry_run: Whether to run in dry_run mode or not. This will avoid saving things when callings save endpoints kwargs: The kwargs to pass to the BaseClient \"\"\" if not customer_id : raise LumAppsClientConfError ( \"customer_id required\" ) self . customer_id = customer_id self . instance_id = instance_id if cache : self . cache = cache else : self . cache = DiscoveryCacheDict () self . dry_run = dry_run self . _langs = None super () . __init__ ( * args , ** kwargs ) self . _cached_metadata = {} Content \u00a4 get_available_instance_slug ( self , desired_slug ) \u00a4 Find an available instance slug according to the given slug and the current token customer. If the exact slug is not avaialble -i at the end until we found an available one or i reachs 300. Parameters: Name Type Description Default desired_slug str The desired slug required Returns: Type Description str The first available slug found Exceptions: Type Description Exception Reached 300 try Source code in lumapps/api/client.py 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 def get_available_instance_slug ( self , desired_slug : str ) -> str : \"\"\" Find an available instance slug according to the given slug and the current token customer. If the exact slug is not avaialble -i at the end until we found an available one or i reachs 300. Args: desired_slug: The desired slug Returns: The first available slug found Raises: Exception: Reached 300 try \"\"\" post_fix = None while True : c = self . get_instance ( slug = desired_slug , fields = \"id\" ) if not c : return desired_slug if not post_fix : post_fix = 1 desired_slug += \"-1\" else : desired_slug = desired_slug [: - len ( str ( post_fix )) - 1 ] post_fix += 1 desired_slug += \"-\" + str ( post_fix ) if post_fix > 100 : raise Exception ( \"300 limit as slug postfix\" ) get_available_slug ( self , desired_slug ) \u00a4 Find an available content slug according to the given slug and the current token customer. If the exact slug is not avaialble -i at the end until we found an available one or i reachs 300. Parameters: Name Type Description Default desired_slug str The desired slug required Returns: Type Description str The first available slug found Exceptions: Type Description Exception Reached 300 try Source code in lumapps/api/client.py 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 def get_available_slug ( self , desired_slug : str ) -> str : \"\"\" Find an available content slug according to the given slug and the current token customer. If the exact slug is not avaialble -i at the end until we found an available one or i reachs 300. Args: desired_slug: The desired slug Returns: The first available slug found Raises: Exception: Reached 300 try \"\"\" post_fix = None while True : if desired_slug in RESERVED_SLUGS : c = True else : c = self . get_content_by_slug ( desired_slug , fields = \"id\" ) if not c : return desired_slug if not post_fix : post_fix = 1 desired_slug += \"-1\" else : desired_slug = desired_slug [: - len ( str ( post_fix )) - 1 ] post_fix += 1 desired_slug += \"-\" + str ( post_fix ) if post_fix > 300 : raise Exception ( \"300 limit as slug postfix\" ) get_content ( self , content_id , fields = None , action = 'PAGE_EDIT' , cache = False ) \u00a4 Get a content via his id Parameters: Name Type Description Default content_id str The id of the content to get required fields str The fields projection to apply None action str PAGE_EDIT 'PAGE_EDIT' cache bool Whether to cache the result or not False Returns: Type Description Optional[Dict[str, Any]] The retrieved content or None if it was not found Source code in lumapps/api/client.py 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 @none_on_404 def get_content ( self , content_id : str , fields : str = None , action : str = \"PAGE_EDIT\" , cache : bool = False , ) -> Optional [ Dict [ str , Any ]]: \"\"\" Get a content via his id Args: content_id: The id of the content to get fields: The fields projection to apply action: PAGE_EDIT cache: Whether to cache the result or not Returns: The retrieved content or None if it was not found \"\"\" if cache : c = self . cache . get ( f \" { self . customer_id } |CONTENT| { content_id } \" ) if c : return c params = {} if action : params [ \"action\" ] = action if fields : params [ \"fields\" ] = fields return self . get_call ( \"content/get\" , uid = content_id , ** params ) # type: ignore get_content_by_slug ( self , slug , fields = None , action = 'PAGE_EDIT' ) \u00a4 Get a content via his slug Parameters: Name Type Description Default slug str The slug of the content to get required fields str The fields projection to apply None action str PAGE_EDIT 'PAGE_EDIT' Returns: Type Description Optional[Dict[str, Any]] The retrieved content or None if it was not found Source code in lumapps/api/client.py 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 @none_on_404 def get_content_by_slug ( self , slug : str , fields : str = None , action : str = \"PAGE_EDIT\" ) -> Optional [ Dict [ str , Any ]]: \"\"\" Get a content via his slug Args: slug: The slug of the content to get fields: The fields projection to apply action: PAGE_EDIT Returns: The retrieved content or None if it was not found \"\"\" params = {} if action : params [ \"action\" ] = action if fields : params [ \"fields\" ] = fields return self . get_call ( \"content/get\" , instance = self . instance_id , slug = slug , ** params ) # type: ignore iter_contents ( self , content_type_id = None , ** kwargs ) \u00a4 Iterate over the contents on the current lumapps site https://apiv1.lumapps.com/#operation/Content/List Parameters: Name Type Description Default content_type_id str The id of a content type. This will be used to filter the retrieved contents None kwargs The args to pass to the request (see lumapps api doc) {} Source code in lumapps/api/client.py 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 def iter_contents ( self , content_type_id : str = None , ** kwargs ) -> Generator [ Dict [ str , Any ], None , None ]: \"\"\" Iterate over the contents on the current lumapps site \\n https://apiv1.lumapps.com/#operation/Content/List Args: content_type_id: The id of a content type. This will be used to filter the retrieved contents kwargs: The args to pass to the request (see lumapps api doc) \"\"\" body = { \"lang\" : \"\" , \"instanceId\" : self . instance_id , \"action\" : \"PAGE_EDIT\" } if content_type_id : body [ \"customContentType\" ] = content_type_id body . update ( ** kwargs ) yield from self . iter_call ( \"content/list\" , body = body ) save_content ( self , content , cache = False ) \u00a4 Save a content Parameters: Name Type Description Default content Dict[str, Any] The content to save required cache bool Whether to cache the saved content based on his id False Returns: Type Description Dict[str, Any] The saved content Source code in lumapps/api/client.py 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 @raise_known_save_errors def save_content ( self , content : Dict [ str , Any ], cache : bool = False ) -> Dict [ str , Any ]: \"\"\" Save a content Args: content: The content to save cache: Whether to cache the saved content based on his id Returns: The saved content \"\"\" debug ( f \"Saving content: { to_json ( content ) } \" ) if self . dry_run : return content assert not content_is_template ( content ) dst = self . get_call ( \"content/save\" , body = content , sendNotifications = False ) if cache : self . cache . set ( f \" { self . customer_id } |CONTENT| { dst [ 'id' ] } \" , dst , 5 * 60 * 60 ) return dst User \u00a4 get_user ( self , id_or_email ) \u00a4 Get a user from his id or email Parameters: Name Type Description Default id_or_email str The id or email or the user required Returns: Type Description Dict[str, Any] The retrieved user Source code in lumapps/api/client.py 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 @lru_cache () def get_user ( self , id_or_email : str ) -> Dict [ str , Any ]: \"\"\" Get a user from his id or email Args: id_or_email: The id or email or the user Returns: The retrieved user \"\"\" k = f \" { self . customer_id } |USER| { id_or_email } \" try : return self . cache . get ( k , raises = True ) except KeyError : pass user = self . _get_user ( id_or_email ) self . cache . set ( k , user , 7200 ) return user iter_users ( self , ** kwargs ) \u00a4 Iterate overs the platform users https://apiv1.lumapps.com/#operation/User/List Parameters: Name Type Description Default **kwargs dict args to add to the request (see api documentation) {} Returns: Type Description Generator[Dict[str, Any], NoneType, NoneType] A generator return the platform users Source code in lumapps/api/client.py 602 603 604 605 606 607 608 609 610 611 612 613 614 def iter_users ( self , ** kwargs : dict ) -> Generator [ Dict [ str , Any ], None , None ]: \"\"\" Iterate overs the platform users \\n https://apiv1.lumapps.com/#operation/User/List Args: **kwargs: args to add to the request (see api documentation) Returns: A generator return the platform users \"\"\" params = { \"instance\" : self . instance_id } params . update ( kwargs ) yield from self . iter_call ( \"user/list\" , ** params ) save_user ( self , user ) \u00a4 Save a user Parameters: Name Type Description Default user Dict[str, Any] The user to save required Returns: Type Description Dict[str, Any] The saved user Source code in lumapps/api/client.py 621 622 623 624 625 626 627 628 629 630 631 632 633 def save_user ( self , user : Dict [ str , Any ]) -> Dict [ str , Any ]: \"\"\" Save a user Args: user: The user to save Returns: The saved user \"\"\" debug ( f \"Saving user: { to_json ( user ) } \" ) if self . dry_run : return user return self . get_call ( \"user/save\" , body = user ) Group \u00a4 get_group ( self , group_id ) \u00a4 Get a group by his id Parameters: Name Type Description Default group_id str The id of the group required Returns: Type Description Dict[str, Any] The retrieved group Source code in lumapps/api/client.py 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 @lru_cache () def get_group ( self , group_id : str ) -> Dict [ str , Any ]: \"\"\" Get a group by his id Args: group_id: The id of the group Returns: The retrieved group \"\"\" return self . get_call ( \"feed/get\" , uid = group_id ) iter_groups ( self , type_id ) \u00a4 Iter the groups on the current site Parameters: Name Type Description Default type_id str The id of the group type (feedType or category) to filter on required Returns: Type Description Generator[Dict[str, Any], NoneType, NoneType] The groups in that group type Source code in lumapps/api/client.py 1616 1617 1618 1619 1620 1621 1622 1623 1624 1625 1626 1627 def iter_groups ( self , type_id : str ) -> Generator [ Dict [ str , Any ], None , None ]: \"\"\" Iter the groups on the current site Args: type_id: The id of the group type (feedType or category) to filter on Returns: The groups in that group type \"\"\" return self . iter_call ( \"feed/list\" , instance = self . instance_id , type = type_id , action = \"GROUP_EDIT\" ) save_group ( self , group , retries = 0 ) \u00a4 Save a group Parameters: Name Type Description Default group Dict[str, Any] The group to save required retries int The number of retries on failure to do 0 Returns: Type Description Dict[str, Any] The saved group Source code in lumapps/api/client.py 1660 1661 1662 1663 1664 1665 1666 1667 1668 1669 1670 1671 1672 1673 1674 1675 1676 1677 1678 1679 1680 1681 1682 1683 1684 def save_group ( self , group : Dict [ str , Any ], retries : int = 0 ) -> Dict [ str , Any ]: \"\"\" Save a group Args: group: The group to save retries: The number of retries on failure to do Returns: The saved group \"\"\" info ( f \"Saving group: { to_json ( group ) } \" ) if self . dry_run : return group attempt = 0 while True : attempt += 1 try : return self . get_call ( \"feed/save\" , body = group ) except HTTPStatusError as e : if e . response . status_code == 503 and attempt < 1 + retries : sleep_time = ( attempt + 1 ) * 3 warning ( f \"503 saving the feed, will retry in { sleep_time } s\" ) sleep ( sleep_time ) continue raise","title":"LumApps Client"},{"location":"lumapps_api_client/#lumapps.api.client.LumAppsClient.__init__","text":"Create a LumAppsClient associated to a particular LumApps platform and site Parameters: Name Type Description Default customer_id str The id of the platform you target required instance_id Optional[str] The id of the instance you target required args The args to pass to the BaseClient () cache Optional[Any] The cache to use None dry_run bool Whether to run in dry_run mode or not. This will avoid saving things when callings save endpoints False kwargs The kwargs to pass to the BaseClient {} Source code in lumapps/api/client.py 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 def __init__ ( self , customer_id : str , instance_id : Optional [ str ], * args , cache : Optional [ Any ] = None , dry_run : bool = False , ** kwargs , ): \"\"\" Create a LumAppsClient associated to a particular LumApps platform and site Args: customer_id: The id of the platform you target instance_id: The id of the instance you target args: The args to pass to the BaseClient cache: The cache to use dry_run: Whether to run in dry_run mode or not. This will avoid saving things when callings save endpoints kwargs: The kwargs to pass to the BaseClient \"\"\" if not customer_id : raise LumAppsClientConfError ( \"customer_id required\" ) self . customer_id = customer_id self . instance_id = instance_id if cache : self . cache = cache else : self . cache = DiscoveryCacheDict () self . dry_run = dry_run self . _langs = None super () . __init__ ( * args , ** kwargs ) self . _cached_metadata = {}","title":"__init__()"},{"location":"lumapps_api_client/#content","text":"","title":"Content"},{"location":"lumapps_api_client/#lumapps.api.client.LumAppsClient.get_available_instance_slug","text":"Find an available instance slug according to the given slug and the current token customer. If the exact slug is not avaialble -i at the end until we found an available one or i reachs 300. Parameters: Name Type Description Default desired_slug str The desired slug required Returns: Type Description str The first available slug found Exceptions: Type Description Exception Reached 300 try Source code in lumapps/api/client.py 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 def get_available_instance_slug ( self , desired_slug : str ) -> str : \"\"\" Find an available instance slug according to the given slug and the current token customer. If the exact slug is not avaialble -i at the end until we found an available one or i reachs 300. Args: desired_slug: The desired slug Returns: The first available slug found Raises: Exception: Reached 300 try \"\"\" post_fix = None while True : c = self . get_instance ( slug = desired_slug , fields = \"id\" ) if not c : return desired_slug if not post_fix : post_fix = 1 desired_slug += \"-1\" else : desired_slug = desired_slug [: - len ( str ( post_fix )) - 1 ] post_fix += 1 desired_slug += \"-\" + str ( post_fix ) if post_fix > 100 : raise Exception ( \"300 limit as slug postfix\" )","title":"get_available_instance_slug()"},{"location":"lumapps_api_client/#lumapps.api.client.LumAppsClient.get_available_slug","text":"Find an available content slug according to the given slug and the current token customer. If the exact slug is not avaialble -i at the end until we found an available one or i reachs 300. Parameters: Name Type Description Default desired_slug str The desired slug required Returns: Type Description str The first available slug found Exceptions: Type Description Exception Reached 300 try Source code in lumapps/api/client.py 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 def get_available_slug ( self , desired_slug : str ) -> str : \"\"\" Find an available content slug according to the given slug and the current token customer. If the exact slug is not avaialble -i at the end until we found an available one or i reachs 300. Args: desired_slug: The desired slug Returns: The first available slug found Raises: Exception: Reached 300 try \"\"\" post_fix = None while True : if desired_slug in RESERVED_SLUGS : c = True else : c = self . get_content_by_slug ( desired_slug , fields = \"id\" ) if not c : return desired_slug if not post_fix : post_fix = 1 desired_slug += \"-1\" else : desired_slug = desired_slug [: - len ( str ( post_fix )) - 1 ] post_fix += 1 desired_slug += \"-\" + str ( post_fix ) if post_fix > 300 : raise Exception ( \"300 limit as slug postfix\" )","title":"get_available_slug()"},{"location":"lumapps_api_client/#lumapps.api.client.LumAppsClient.get_content","text":"Get a content via his id Parameters: Name Type Description Default content_id str The id of the content to get required fields str The fields projection to apply None action str PAGE_EDIT 'PAGE_EDIT' cache bool Whether to cache the result or not False Returns: Type Description Optional[Dict[str, Any]] The retrieved content or None if it was not found Source code in lumapps/api/client.py 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 @none_on_404 def get_content ( self , content_id : str , fields : str = None , action : str = \"PAGE_EDIT\" , cache : bool = False , ) -> Optional [ Dict [ str , Any ]]: \"\"\" Get a content via his id Args: content_id: The id of the content to get fields: The fields projection to apply action: PAGE_EDIT cache: Whether to cache the result or not Returns: The retrieved content or None if it was not found \"\"\" if cache : c = self . cache . get ( f \" { self . customer_id } |CONTENT| { content_id } \" ) if c : return c params = {} if action : params [ \"action\" ] = action if fields : params [ \"fields\" ] = fields return self . get_call ( \"content/get\" , uid = content_id , ** params ) # type: ignore","title":"get_content()"},{"location":"lumapps_api_client/#lumapps.api.client.LumAppsClient.get_content_by_slug","text":"Get a content via his slug Parameters: Name Type Description Default slug str The slug of the content to get required fields str The fields projection to apply None action str PAGE_EDIT 'PAGE_EDIT' Returns: Type Description Optional[Dict[str, Any]] The retrieved content or None if it was not found Source code in lumapps/api/client.py 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 @none_on_404 def get_content_by_slug ( self , slug : str , fields : str = None , action : str = \"PAGE_EDIT\" ) -> Optional [ Dict [ str , Any ]]: \"\"\" Get a content via his slug Args: slug: The slug of the content to get fields: The fields projection to apply action: PAGE_EDIT Returns: The retrieved content or None if it was not found \"\"\" params = {} if action : params [ \"action\" ] = action if fields : params [ \"fields\" ] = fields return self . get_call ( \"content/get\" , instance = self . instance_id , slug = slug , ** params ) # type: ignore","title":"get_content_by_slug()"},{"location":"lumapps_api_client/#lumapps.api.client.LumAppsClient.iter_contents","text":"Iterate over the contents on the current lumapps site https://apiv1.lumapps.com/#operation/Content/List Parameters: Name Type Description Default content_type_id str The id of a content type. This will be used to filter the retrieved contents None kwargs The args to pass to the request (see lumapps api doc) {} Source code in lumapps/api/client.py 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 def iter_contents ( self , content_type_id : str = None , ** kwargs ) -> Generator [ Dict [ str , Any ], None , None ]: \"\"\" Iterate over the contents on the current lumapps site \\n https://apiv1.lumapps.com/#operation/Content/List Args: content_type_id: The id of a content type. This will be used to filter the retrieved contents kwargs: The args to pass to the request (see lumapps api doc) \"\"\" body = { \"lang\" : \"\" , \"instanceId\" : self . instance_id , \"action\" : \"PAGE_EDIT\" } if content_type_id : body [ \"customContentType\" ] = content_type_id body . update ( ** kwargs ) yield from self . iter_call ( \"content/list\" , body = body )","title":"iter_contents()"},{"location":"lumapps_api_client/#lumapps.api.client.LumAppsClient.save_content","text":"Save a content Parameters: Name Type Description Default content Dict[str, Any] The content to save required cache bool Whether to cache the saved content based on his id False Returns: Type Description Dict[str, Any] The saved content Source code in lumapps/api/client.py 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 @raise_known_save_errors def save_content ( self , content : Dict [ str , Any ], cache : bool = False ) -> Dict [ str , Any ]: \"\"\" Save a content Args: content: The content to save cache: Whether to cache the saved content based on his id Returns: The saved content \"\"\" debug ( f \"Saving content: { to_json ( content ) } \" ) if self . dry_run : return content assert not content_is_template ( content ) dst = self . get_call ( \"content/save\" , body = content , sendNotifications = False ) if cache : self . cache . set ( f \" { self . customer_id } |CONTENT| { dst [ 'id' ] } \" , dst , 5 * 60 * 60 ) return dst","title":"save_content()"},{"location":"lumapps_api_client/#user","text":"","title":"User"},{"location":"lumapps_api_client/#lumapps.api.client.LumAppsClient.get_user","text":"Get a user from his id or email Parameters: Name Type Description Default id_or_email str The id or email or the user required Returns: Type Description Dict[str, Any] The retrieved user Source code in lumapps/api/client.py 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 @lru_cache () def get_user ( self , id_or_email : str ) -> Dict [ str , Any ]: \"\"\" Get a user from his id or email Args: id_or_email: The id or email or the user Returns: The retrieved user \"\"\" k = f \" { self . customer_id } |USER| { id_or_email } \" try : return self . cache . get ( k , raises = True ) except KeyError : pass user = self . _get_user ( id_or_email ) self . cache . set ( k , user , 7200 ) return user","title":"get_user()"},{"location":"lumapps_api_client/#lumapps.api.client.LumAppsClient.iter_users","text":"Iterate overs the platform users https://apiv1.lumapps.com/#operation/User/List Parameters: Name Type Description Default **kwargs dict args to add to the request (see api documentation) {} Returns: Type Description Generator[Dict[str, Any], NoneType, NoneType] A generator return the platform users Source code in lumapps/api/client.py 602 603 604 605 606 607 608 609 610 611 612 613 614 def iter_users ( self , ** kwargs : dict ) -> Generator [ Dict [ str , Any ], None , None ]: \"\"\" Iterate overs the platform users \\n https://apiv1.lumapps.com/#operation/User/List Args: **kwargs: args to add to the request (see api documentation) Returns: A generator return the platform users \"\"\" params = { \"instance\" : self . instance_id } params . update ( kwargs ) yield from self . iter_call ( \"user/list\" , ** params )","title":"iter_users()"},{"location":"lumapps_api_client/#lumapps.api.client.LumAppsClient.save_user","text":"Save a user Parameters: Name Type Description Default user Dict[str, Any] The user to save required Returns: Type Description Dict[str, Any] The saved user Source code in lumapps/api/client.py 621 622 623 624 625 626 627 628 629 630 631 632 633 def save_user ( self , user : Dict [ str , Any ]) -> Dict [ str , Any ]: \"\"\" Save a user Args: user: The user to save Returns: The saved user \"\"\" debug ( f \"Saving user: { to_json ( user ) } \" ) if self . dry_run : return user return self . get_call ( \"user/save\" , body = user )","title":"save_user()"},{"location":"lumapps_api_client/#group","text":"","title":"Group"},{"location":"lumapps_api_client/#lumapps.api.client.LumAppsClient.get_group","text":"Get a group by his id Parameters: Name Type Description Default group_id str The id of the group required Returns: Type Description Dict[str, Any] The retrieved group Source code in lumapps/api/client.py 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 @lru_cache () def get_group ( self , group_id : str ) -> Dict [ str , Any ]: \"\"\" Get a group by his id Args: group_id: The id of the group Returns: The retrieved group \"\"\" return self . get_call ( \"feed/get\" , uid = group_id )","title":"get_group()"},{"location":"lumapps_api_client/#lumapps.api.client.LumAppsClient.iter_groups","text":"Iter the groups on the current site Parameters: Name Type Description Default type_id str The id of the group type (feedType or category) to filter on required Returns: Type Description Generator[Dict[str, Any], NoneType, NoneType] The groups in that group type Source code in lumapps/api/client.py 1616 1617 1618 1619 1620 1621 1622 1623 1624 1625 1626 1627 def iter_groups ( self , type_id : str ) -> Generator [ Dict [ str , Any ], None , None ]: \"\"\" Iter the groups on the current site Args: type_id: The id of the group type (feedType or category) to filter on Returns: The groups in that group type \"\"\" return self . iter_call ( \"feed/list\" , instance = self . instance_id , type = type_id , action = \"GROUP_EDIT\" )","title":"iter_groups()"},{"location":"lumapps_api_client/#lumapps.api.client.LumAppsClient.save_group","text":"Save a group Parameters: Name Type Description Default group Dict[str, Any] The group to save required retries int The number of retries on failure to do 0 Returns: Type Description Dict[str, Any] The saved group Source code in lumapps/api/client.py 1660 1661 1662 1663 1664 1665 1666 1667 1668 1669 1670 1671 1672 1673 1674 1675 1676 1677 1678 1679 1680 1681 1682 1683 1684 def save_group ( self , group : Dict [ str , Any ], retries : int = 0 ) -> Dict [ str , Any ]: \"\"\" Save a group Args: group: The group to save retries: The number of retries on failure to do Returns: The saved group \"\"\" info ( f \"Saving group: { to_json ( group ) } \" ) if self . dry_run : return group attempt = 0 while True : attempt += 1 try : return self . get_call ( \"feed/save\" , body = group ) except HTTPStatusError as e : if e . response . status_code == 503 and attempt < 1 + retries : sleep_time = ( attempt + 1 ) * 3 warning ( f \"503 saving the feed, will retry in { sleep_time } s\" ) sleep ( sleep_time ) continue raise","title":"save_group()"},{"location":"medias/","text":"\u00a4 add_media_file_for_lang ( client , media , file_data_or_path , filename , mimetype , lang = 'en' , croppedContent = False ) \u00a4 Add a file to an existing LumApps media. Parameters: Name Type Description Default client BaseClient The BaseClient used to make httpx to the LumApps Api. required media Dict[str, Any] The LumApps media on which the files have to be uploaded. required file_data_or_path str The filepath (str) or the data (bytes) to upload. required filename str The name of the file to upload. Once uploaded the file will appear with that name. required mimetype str The mimeType fo the file to upload. required lang Optional[str] The lang of the file to upload (default: \"en\"). 'en' croppedContent Optional[bool] Wether to add the file to the croppedContent instead or content (default: False) False Returns: Type Description Optional[Dict[str, Any]] The updated media if succesfull, otherwise None. Source code in lumapps/api/helpers/medias.py 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 def add_media_file_for_lang ( client : BaseClient , media : Dict [ str , Any ], file_data_or_path : str , filename : str , mimetype : str , lang : Optional [ str ] = \"en\" , croppedContent : Optional [ bool ] = False , ) -> Optional [ Dict [ str , Any ]]: \"\"\" Add a file to an existing LumApps media. Args: client: The BaseClient used to make httpx to the LumApps Api. media: The LumApps media on which the files have to be uploaded. file_data_or_path (Union[bytes, str]): The filepath (str) or the data (bytes) to upload. filename: The name of the file to upload. Once uploaded the file will appear with that name. mimetype: The mimeType fo the file to upload. lang: The lang of the file to upload (default: \"en\"). croppedContent (bool): Wether to add the file to the croppedContent instead or content (default: False) Returns: The updated media if succesfull, otherwise None. \"\"\" # noqa # upload the file uploaded_file = _upload_new_media_file_of_given_lang ( client = client , file_data_or_path = file_data_or_path , filename = filename , mimetype = mimetype , lang = lang , ) if not uploaded_file : return media # update the media where = \"croppedContent\" if croppedContent else \"content\" media [ where ] . append ( uploaded_file ) saved : Any = client . get_call ( \"document/update\" , body = media ) return saved create_new_media ( client , file_data_or_path , doc_path , filename , mimetype , is_shared , lang = 'en' ) \u00a4 Upload a file and create a new media in LumApps media library. Parameters: Name Type Description Default client BaseClient The BaseClient used to make httpx to the LumApps Api. required file_data_or_path Union[bytes, str] The filepath (str) or the data (bytes) to upload. required doc_path str The doc path of the media to upload, this will decide where the media will go in your media library (eg: provider= < my_provider > /site= < my_site_id > /resource= < my_parent_folder_id > ) required filename str The name of the file to upload. Once uploaded the file will appear with that name. required mimetype str The mimeType fo the file to upload. required is_shared bool Wether the file is shared or not. Non shared files will only be visible by you. required lang Optional[str] The lang of the file to upload (default: \"en\"). 'en' Exceptions: Type Description Exception The data or file path type provided is not supported. Returns: Type Description Optional[Dict[str, Any]] Return the uploaded media if successfull, None otherwise. Source code in lumapps/api/helpers/medias.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 def create_new_media ( client : BaseClient , file_data_or_path : Union [ bytes , str ], doc_path : str , filename : str , mimetype : str , is_shared : bool , lang : Optional [ str ] = \"en\" , ) -> Optional [ Dict [ str , Any ]]: \"\"\" Upload a file and create a new media in LumApps media library. Args: client: The BaseClient used to make httpx to the LumApps Api. file_data_or_path: The filepath (str) or the data (bytes) to upload. doc_path: The doc path of the media to upload, this will decide where the media will go in your media library (eg: provider=`<`my_provider`>`/site=`<`my_site_id`>`/resource=`<`my_parent_folder_id`>`) filename: The name of the file to upload. Once uploaded the file will appear with that name. mimetype: The mimeType fo the file to upload. is_shared: Wether the file is shared or not. Non shared files will only be visible by you. lang: The lang of the file to upload (default: \"en\"). Raises: Exception: The data or file path type provided is not supported. Returns: Return the uploaded media if successfull, None otherwise. \"\"\" # noqa if isinstance ( file_data_or_path , str ): file_data = open ( file_data_or_path , \"rb\" ) elif isinstance ( file_data_or_path , bytes ): file_data = file_data_or_path # type: ignore else : raise BaseClientError ( \"File data or path type not supported: {} \" . format ( type ( file_data_or_path )) ) # Get upload url for the document body = { \"fileName\" : filename , \"lang\" : lang , \"parentPath\" : doc_path , \"shared\" : is_shared , \"success\" : \"/upload\" , } upload_infos : Any = client . get_call ( \"document/uploadUrl/get\" , body = body ) upload_url = upload_infos [ \"uploadUrl\" ] # Upload files_tuple_list : Any = [( \"files\" , ( filename , file_data , mimetype ))] response = httpx . post ( upload_url , headers = { \"Authorization\" : \"Bearer \" + client . token }, files = files_tuple_list , # type: ignore ) doc = response . json () . get ( \"items\" ) if doc : return doc [ 0 ] return None","title":"Medias"},{"location":"medias/#lumapps.api.helpers.medias","text":"","title":"lumapps.api.helpers.medias"},{"location":"medias/#lumapps.api.helpers.medias.add_media_file_for_lang","text":"Add a file to an existing LumApps media. Parameters: Name Type Description Default client BaseClient The BaseClient used to make httpx to the LumApps Api. required media Dict[str, Any] The LumApps media on which the files have to be uploaded. required file_data_or_path str The filepath (str) or the data (bytes) to upload. required filename str The name of the file to upload. Once uploaded the file will appear with that name. required mimetype str The mimeType fo the file to upload. required lang Optional[str] The lang of the file to upload (default: \"en\"). 'en' croppedContent Optional[bool] Wether to add the file to the croppedContent instead or content (default: False) False Returns: Type Description Optional[Dict[str, Any]] The updated media if succesfull, otherwise None. Source code in lumapps/api/helpers/medias.py 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 def add_media_file_for_lang ( client : BaseClient , media : Dict [ str , Any ], file_data_or_path : str , filename : str , mimetype : str , lang : Optional [ str ] = \"en\" , croppedContent : Optional [ bool ] = False , ) -> Optional [ Dict [ str , Any ]]: \"\"\" Add a file to an existing LumApps media. Args: client: The BaseClient used to make httpx to the LumApps Api. media: The LumApps media on which the files have to be uploaded. file_data_or_path (Union[bytes, str]): The filepath (str) or the data (bytes) to upload. filename: The name of the file to upload. Once uploaded the file will appear with that name. mimetype: The mimeType fo the file to upload. lang: The lang of the file to upload (default: \"en\"). croppedContent (bool): Wether to add the file to the croppedContent instead or content (default: False) Returns: The updated media if succesfull, otherwise None. \"\"\" # noqa # upload the file uploaded_file = _upload_new_media_file_of_given_lang ( client = client , file_data_or_path = file_data_or_path , filename = filename , mimetype = mimetype , lang = lang , ) if not uploaded_file : return media # update the media where = \"croppedContent\" if croppedContent else \"content\" media [ where ] . append ( uploaded_file ) saved : Any = client . get_call ( \"document/update\" , body = media ) return saved","title":"add_media_file_for_lang()"},{"location":"medias/#lumapps.api.helpers.medias.create_new_media","text":"Upload a file and create a new media in LumApps media library. Parameters: Name Type Description Default client BaseClient The BaseClient used to make httpx to the LumApps Api. required file_data_or_path Union[bytes, str] The filepath (str) or the data (bytes) to upload. required doc_path str The doc path of the media to upload, this will decide where the media will go in your media library (eg: provider= < my_provider > /site= < my_site_id > /resource= < my_parent_folder_id > ) required filename str The name of the file to upload. Once uploaded the file will appear with that name. required mimetype str The mimeType fo the file to upload. required is_shared bool Wether the file is shared or not. Non shared files will only be visible by you. required lang Optional[str] The lang of the file to upload (default: \"en\"). 'en' Exceptions: Type Description Exception The data or file path type provided is not supported. Returns: Type Description Optional[Dict[str, Any]] Return the uploaded media if successfull, None otherwise. Source code in lumapps/api/helpers/medias.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 def create_new_media ( client : BaseClient , file_data_or_path : Union [ bytes , str ], doc_path : str , filename : str , mimetype : str , is_shared : bool , lang : Optional [ str ] = \"en\" , ) -> Optional [ Dict [ str , Any ]]: \"\"\" Upload a file and create a new media in LumApps media library. Args: client: The BaseClient used to make httpx to the LumApps Api. file_data_or_path: The filepath (str) or the data (bytes) to upload. doc_path: The doc path of the media to upload, this will decide where the media will go in your media library (eg: provider=`<`my_provider`>`/site=`<`my_site_id`>`/resource=`<`my_parent_folder_id`>`) filename: The name of the file to upload. Once uploaded the file will appear with that name. mimetype: The mimeType fo the file to upload. is_shared: Wether the file is shared or not. Non shared files will only be visible by you. lang: The lang of the file to upload (default: \"en\"). Raises: Exception: The data or file path type provided is not supported. Returns: Return the uploaded media if successfull, None otherwise. \"\"\" # noqa if isinstance ( file_data_or_path , str ): file_data = open ( file_data_or_path , \"rb\" ) elif isinstance ( file_data_or_path , bytes ): file_data = file_data_or_path # type: ignore else : raise BaseClientError ( \"File data or path type not supported: {} \" . format ( type ( file_data_or_path )) ) # Get upload url for the document body = { \"fileName\" : filename , \"lang\" : lang , \"parentPath\" : doc_path , \"shared\" : is_shared , \"success\" : \"/upload\" , } upload_infos : Any = client . get_call ( \"document/uploadUrl/get\" , body = body ) upload_url = upload_infos [ \"uploadUrl\" ] # Upload files_tuple_list : Any = [( \"files\" , ( filename , file_data , mimetype ))] response = httpx . post ( upload_url , headers = { \"Authorization\" : \"Bearer \" + client . token }, files = files_tuple_list , # type: ignore ) doc = response . json () . get ( \"items\" ) if doc : return doc [ 0 ] return None","title":"create_new_media()"},{"location":"widgets/","text":"\u00a4 find_all_widgets ( container , ** params ) \u00a4 Find and return all widgets in the container that respect the filters Parameters: Name Type Description Default container Dict[str, Any] The container of the widgets, that could be a content, community, the components of a content or the template of a content required Kwargs params: params to filter on (eg, widgetType='video' will find athe first video widget in the given container) Returns: Type Description List[Dict[str, Any]] The list of all found widgets Source code in lumapps/api/helpers/widgets.py 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 def find_all_widgets ( container : Dict [ str , Any ], ** params : Dict [ str , Any ] ) -> List [ Dict [ str , Any ]]: \"\"\" Find and return all widgets in the container that respect the filters Args: container: The container of the widgets, that could be a content, community, the components of a content or the template of a content Kwargs: params: params to filter on (eg, widgetType='video' will find athe first video widget in the given container) Returns: The list of all found widgets \"\"\" # noqa return list ( w for w , _ in iter_widgets_and_containers ( container , ** params )) find_widget ( container , ** params ) \u00a4 Find and return the first widget in the container that respect the filters Parameters: Name Type Description Default container Dict[str, Any] The container of the widgets, that could be a content, community, the components of a content or the template of a content required Kwargs params: params to filter on (eg, widgetType='video' will find athe first video widget in the given container) Returns: Type Description Optional[Dict[str, Any]] The first found widget Source code in lumapps/api/helpers/widgets.py 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 def find_widget ( container : Dict [ str , Any ], ** params : Dict [ str , Any ] ) -> Optional [ Dict [ str , Any ]]: \"\"\" Find and return the first widget in the container that respect the filters Args: container: The container of the widgets, that could be a content, community, the components of a content or the template of a content Kwargs: params: params to filter on (eg, widgetType='video' will find athe first video widget in the given container) Returns: The first found widget \"\"\" # noqa for w , _ in iter_widgets_and_containers ( container , ** params ): return w return None","title":"Widgets"},{"location":"widgets/#lumapps.api.helpers.widgets","text":"","title":"lumapps.api.helpers.widgets"},{"location":"widgets/#lumapps.api.helpers.widgets.find_all_widgets","text":"Find and return all widgets in the container that respect the filters Parameters: Name Type Description Default container Dict[str, Any] The container of the widgets, that could be a content, community, the components of a content or the template of a content required Kwargs params: params to filter on (eg, widgetType='video' will find athe first video widget in the given container) Returns: Type Description List[Dict[str, Any]] The list of all found widgets Source code in lumapps/api/helpers/widgets.py 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 def find_all_widgets ( container : Dict [ str , Any ], ** params : Dict [ str , Any ] ) -> List [ Dict [ str , Any ]]: \"\"\" Find and return all widgets in the container that respect the filters Args: container: The container of the widgets, that could be a content, community, the components of a content or the template of a content Kwargs: params: params to filter on (eg, widgetType='video' will find athe first video widget in the given container) Returns: The list of all found widgets \"\"\" # noqa return list ( w for w , _ in iter_widgets_and_containers ( container , ** params ))","title":"find_all_widgets()"},{"location":"widgets/#lumapps.api.helpers.widgets.find_widget","text":"Find and return the first widget in the container that respect the filters Parameters: Name Type Description Default container Dict[str, Any] The container of the widgets, that could be a content, community, the components of a content or the template of a content required Kwargs params: params to filter on (eg, widgetType='video' will find athe first video widget in the given container) Returns: Type Description Optional[Dict[str, Any]] The first found widget Source code in lumapps/api/helpers/widgets.py 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 def find_widget ( container : Dict [ str , Any ], ** params : Dict [ str , Any ] ) -> Optional [ Dict [ str , Any ]]: \"\"\" Find and return the first widget in the container that respect the filters Args: container: The container of the widgets, that could be a content, community, the components of a content or the template of a content Kwargs: params: params to filter on (eg, widgetType='video' will find athe first video widget in the given container) Returns: The first found widget \"\"\" # noqa for w , _ in iter_widgets_and_containers ( container , ** params ): return w return None","title":"find_widget()"},{"location":"guides/base_client_guide/","text":"Base Client \u00a4 The base client exposed by the lumapps-sdk allows you to interact with the lumapps apis more easily, to do so you have 2 mains methods defined in it. get_call method \u00a4 The get_call method allows you to call a particular endpoint and get result. This is the main way to call the LumApps apis. If you call a list endpoint (eg, user/list), this method will fetch all the pages an returns you all the results at once. iter_call method \u00a4 The iter_call is an alternative method that will fetch page by page the elements an return them in a python generator. This can help you manage memory more efficiently. Adding query parameters \u00a4 To specify query parameters allong with the call you have to add them as kwargs of the get_call (or iter_call ) method For instance if you want to get a particular user identified by his email you'll do: from lumapps.api.base_client import BaseClient client = BaseClient ( token = \"<your_token>\" ) email = \"<the_user_email>\" user = client . get_call ( \"user/get\" , email = email ) Adding request body parameters \u00a4 To specify body parameters allong with the call you have to add them as a dict passed in the body parameters of the get_call method For instance if you want to create a particular user: from lumapps.api.base_client import BaseClient client = BaseClient ( token = \"<your_token>\" ) body = { \"email\" : \"test@test.com\" , \"accountType\" : \"external\" } saved_user = client . get_call ( \"user/get\" , body = body )","title":"Base Client"},{"location":"guides/base_client_guide/#base-client","text":"The base client exposed by the lumapps-sdk allows you to interact with the lumapps apis more easily, to do so you have 2 mains methods defined in it.","title":"Base Client"},{"location":"guides/base_client_guide/#get_call-method","text":"The get_call method allows you to call a particular endpoint and get result. This is the main way to call the LumApps apis. If you call a list endpoint (eg, user/list), this method will fetch all the pages an returns you all the results at once.","title":"get_call method"},{"location":"guides/base_client_guide/#iter_call-method","text":"The iter_call is an alternative method that will fetch page by page the elements an return them in a python generator. This can help you manage memory more efficiently.","title":"iter_call method"},{"location":"guides/base_client_guide/#adding-query-parameters","text":"To specify query parameters allong with the call you have to add them as kwargs of the get_call (or iter_call ) method For instance if you want to get a particular user identified by his email you'll do: from lumapps.api.base_client import BaseClient client = BaseClient ( token = \"<your_token>\" ) email = \"<the_user_email>\" user = client . get_call ( \"user/get\" , email = email )","title":"Adding query parameters"},{"location":"guides/base_client_guide/#adding-request-body-parameters","text":"To specify body parameters allong with the call you have to add them as a dict passed in the body parameters of the get_call method For instance if you want to create a particular user: from lumapps.api.base_client import BaseClient client = BaseClient ( token = \"<your_token>\" ) body = { \"email\" : \"test@test.com\" , \"accountType\" : \"external\" } saved_user = client . get_call ( \"user/get\" , body = body )","title":"Adding request body parameters"},{"location":"guides/comments/","text":"Comments \u00a4 Comment list \u00a4 with_answers = True #False comments = api . get_call ( \"comment\" , \"list\" , content = \"YOUR_POST_ID\" , withAnswers = with_answers ) For more details see api.lumapps.com Comment get \u00a4 from lumapps.api.base_client import BaseClient client = BaseClient ( token = \"<your_token>\" ) comment = client . get_call ( \"comment/get\" , uid = \"YOUR_COMMENT_ID\" ) For more details see api.lumapps.com Comment save \u00a4 The variable comment is a json object described here . You can either construct a new one from scratch: comment = { \"content\" : \"YOUR_POST_ID\" , \"customer\" : \"YOUR_CUSTOMER_ID\" , \"instance\" : \"YOUR_INSTANCE_ID\" , \"text\" : { { \"fr\" : \"Comment content, you can use markdown\" }, }, \"publicationDate\" : publication_date , \"createdAt\" : publication_date , \"startDate\" : publication_date , } or update properties from one you just got using the api. ```python from lumapps.api.base_client import BaseClient client = BaseClient(token=\" \") comment = client.get_call( \"comment/get\", uid=\"YOUR_COMMENT_ID\" ) comment[\"title\"] = {\"fr\": \"New title\"} comment = client.get_call( \"comment/save\", body=comment ) For more details see the api documentation","title":"Comments"},{"location":"guides/comments/#comments","text":"","title":"Comments"},{"location":"guides/comments/#comment-list","text":"with_answers = True #False comments = api . get_call ( \"comment\" , \"list\" , content = \"YOUR_POST_ID\" , withAnswers = with_answers ) For more details see api.lumapps.com","title":"Comment list"},{"location":"guides/comments/#comment-get","text":"from lumapps.api.base_client import BaseClient client = BaseClient ( token = \"<your_token>\" ) comment = client . get_call ( \"comment/get\" , uid = \"YOUR_COMMENT_ID\" ) For more details see api.lumapps.com","title":"Comment get"},{"location":"guides/comments/#comment-save","text":"The variable comment is a json object described here . You can either construct a new one from scratch: comment = { \"content\" : \"YOUR_POST_ID\" , \"customer\" : \"YOUR_CUSTOMER_ID\" , \"instance\" : \"YOUR_INSTANCE_ID\" , \"text\" : { { \"fr\" : \"Comment content, you can use markdown\" }, }, \"publicationDate\" : publication_date , \"createdAt\" : publication_date , \"startDate\" : publication_date , } or update properties from one you just got using the api. ```python from lumapps.api.base_client import BaseClient client = BaseClient(token=\" \") comment = client.get_call( \"comment/get\", uid=\"YOUR_COMMENT_ID\" ) comment[\"title\"] = {\"fr\": \"New title\"} comment = client.get_call( \"comment/save\", body=comment ) For more details see the api documentation","title":"Comment save"},{"location":"guides/community/","text":"Communities \u00a4 Community list \u00a4 from lumapps.api.base_client import BaseClient client = BaseClient ( token = \"<your_token>\" ) body = { \"instanceId\" : \"YOUR_INSTANCE_ID\" , \"lang\" : \"fr\" , } communities = client . get_call ( \"community/list\" , body = body ) For more details see the api documentation Community get \u00a4 from lumapps.api.base_client import BaseClient client = BaseClient ( token = \"<your_token>\" ) community = client . get_call ( \"community/get\" , uid = \"YOUR_COMMUNITY_ID\" ) For more details see the api documentation","title":"Community"},{"location":"guides/community/#communities","text":"","title":"Communities"},{"location":"guides/community/#community-list","text":"from lumapps.api.base_client import BaseClient client = BaseClient ( token = \"<your_token>\" ) body = { \"instanceId\" : \"YOUR_INSTANCE_ID\" , \"lang\" : \"fr\" , } communities = client . get_call ( \"community/list\" , body = body ) For more details see the api documentation","title":"Community list"},{"location":"guides/community/#community-get","text":"from lumapps.api.base_client import BaseClient client = BaseClient ( token = \"<your_token>\" ) community = client . get_call ( \"community/get\" , uid = \"YOUR_COMMUNITY_ID\" ) For more details see the api documentation","title":"Community get"},{"location":"guides/community_posts/","text":"Posts \u00a4 Post list \u00a4 from lumapps.api.base_client import BaseClient client = BaseClient ( token = \"<your_token>\" ) body = { \"contentId\" : community_id , \"lang\" : \"\" , } posts = client . get_call ( \"community/post/search\" , body = body ) For more details see the api documentation Post get \u00a4 from lumapps.api.base_client import BaseClient client = BaseClient ( token = \"<your_token>\" ) post = client . get_call ( \"community/post/get\" , uid = \"YOUR_POST_ID\" ) For more details see the api documentation Post save \u00a4 The variable post is a json object described here . You can either construct a new one from scratch: post = { \"customer\" : \"YOUR_CUSTOMER_ID\" , \"instance\" : \"YOUR_INSTANCE_ID\" , \"type\" : \"post\" , \"postType\" : \"[DEFAULT|IDEA|QUESTION]\" , \"externalKey\" : \"YOUR_COMMUNITY_ID\" , \"title\" : { \"fr\" : \"Some post title\" }, \"content\" : { \"fr\" : \"Post content, you can use markdown\" }, \"publicationDate\" : publication_date , \"createdAt\" : publication_date , \"startDate\" : publication_date , \"version\" : 1 , } or update properties from one you just got using the api. from lumapps.api.base_client import BaseClient client = BaseClient ( token = \"<your_token>\" ) post = client . get_call ( \"community/post/get\" , uid = \"YOUR_POST_ID\" ) # Modify the post post [ \"tttle\" ] = { \"fr\" : \"New title\" } # Save the post post = api . get_call ( \"community/post/save\" , body = post ) For more details see the api documentation","title":"Posts"},{"location":"guides/community_posts/#posts","text":"","title":"Posts"},{"location":"guides/community_posts/#post-list","text":"from lumapps.api.base_client import BaseClient client = BaseClient ( token = \"<your_token>\" ) body = { \"contentId\" : community_id , \"lang\" : \"\" , } posts = client . get_call ( \"community/post/search\" , body = body ) For more details see the api documentation","title":"Post list"},{"location":"guides/community_posts/#post-get","text":"from lumapps.api.base_client import BaseClient client = BaseClient ( token = \"<your_token>\" ) post = client . get_call ( \"community/post/get\" , uid = \"YOUR_POST_ID\" ) For more details see the api documentation","title":"Post get"},{"location":"guides/community_posts/#post-save","text":"The variable post is a json object described here . You can either construct a new one from scratch: post = { \"customer\" : \"YOUR_CUSTOMER_ID\" , \"instance\" : \"YOUR_INSTANCE_ID\" , \"type\" : \"post\" , \"postType\" : \"[DEFAULT|IDEA|QUESTION]\" , \"externalKey\" : \"YOUR_COMMUNITY_ID\" , \"title\" : { \"fr\" : \"Some post title\" }, \"content\" : { \"fr\" : \"Post content, you can use markdown\" }, \"publicationDate\" : publication_date , \"createdAt\" : publication_date , \"startDate\" : publication_date , \"version\" : 1 , } or update properties from one you just got using the api. from lumapps.api.base_client import BaseClient client = BaseClient ( token = \"<your_token>\" ) post = client . get_call ( \"community/post/get\" , uid = \"YOUR_POST_ID\" ) # Modify the post post [ \"tttle\" ] = { \"fr\" : \"New title\" } # Save the post post = api . get_call ( \"community/post/save\" , body = post ) For more details see the api documentation","title":"Post save"},{"location":"guides/content/","text":"Content \u00a4 Content listing \u00a4 The lang parameter is mandatory for this call. You can add more filters, see apidoc from lumapps.api.base_client import BaseClient client = BaseClient ( token = \"<your_token>\" ) contents = client . get_call ( \"content/list\" , body = { \"lang\" : \"en\" }) Content details \u00a4 This call is designed for content view content = client . get_call ( \"content/get\" , uid = \"5386179638984704\" ) NB: content.uid = content.id Content update \u00a4 Get content with action=PAGE_EDIT to have all the relevant data. content = client . get_call ( \"content/get\" , uid = \"5386179638984704\" , action = \"PAGE_EDIT\" ) Note: the version number is used to lock the resource. You have to put the last version number of a content in version to be allowed to update a content, else a bad request: \"CONTENT_NOT_UP_TO_DATE\" will be returned. Content creation \u00a4 The simplest way to create content is to use an existing template. This template will define all design configurations. base_template = api . get_call ( \"template/get\" , uid = \"123456789\" ) # note : it's possible to use a content as well. new_content = { \"type\" : \"page\" , # fixed \"template\" : base_template [ template ], # copy all the structure (see below for details) \"customContentType\" : base_template [ \"customContentType\" ], # custom content type id \"customer\" : base_template [ \"customer\" ], # customer id \"instance\" : base_template [ \"instance\" ], # instance id \"feedKeys\" : base_template [ \"feedKeys\" ], # it's the `visibleBy` field in the front interface. \"publicationDate\" : base_template [ publicationDate ], \"title\" : { \"en\" : \"created content from api\" }, \"slug\" : { \"en\" : \"create-content-from-api\" }, # WARNING : should be unique per instance \"metadata\" : [], # if any, provide metadata value uid } new_content_saved = client . get_call ( \"content/save\" , body = new_content ) To create content on behalf of other users you have to be connected with this user. Objects explanation \u00a4 Content \u00a4 { \"id\" : \"134567\" , \"type\" : \"page\" , \"status\" : \"LIVE|ARCHIVED\" , \"canonicalUrl\" : \"https://...\" , \"thumbnail\" : \"media library url\" , \"publicationDate\" : \"2018-06-29T09:28:34.346124\" , \"updatedAt\" : \"2018-06-29T09:28:34.346124\" , \"authorId\" : \"23142536879786754\" # set at creation time with the connected user } Content.canonicalUrl \u00a4 The canonicalUrl property contains the links that can be used to access the content. Content.template \u00a4 The template property contains the whole page structure. Widgets are directly placed in this structure. { \"template\" : { \"components\" : [ { \"type\" : \"row\" , \"cells\" : [ { \"type\" : \"cell\" , \"components\" :[ { \"type\" : \"row|widget\" , ... }, ... ] }, ... ] }, ... ] } } You should iterate over all the structure to find the correct widget to update. Content.thumbnail \u00a4 A content can have a thumbnail, it's a picture associated with it and shows when listed in a content-list widget for instance. When adding a thumbnail to a content you need to provide the blob key of the uploaded image in the thumbnail attribute. To upload and obtain that blobkey see here . Update an existing thumbnail \u00a4 # First get the content content = api . get_call ( 'content/get' , uid = \"6448894901878784\" ) # Update the thumbnail field by the media blob key new_content = { ... \"thumbnail\" : < your_new_blob_key > } # Resave the content client . get_call ( 'content/save' , body = new_content ) Widget \u00a4 Widgets are placed in the content.template tree. Widgets can be identified by their UUID { \"type\" : \"widget\" , \"widgetType\" : \"contact|html|...\" , \"uuid\" : \"ca2bd99c-7b7e-11e8-8255-abba20e0e453\" , } Specific configurations are in properties . Ex for an HTML widget: { \"type\" : \"widget\" , \"widgetType\" : \"html\" , \"uuid\" : \"ca2bd99c-...\" , \"properties\" : { \"content\" : { \"fr\" : \"<p>Contenu html en fran\u00e7ais</p>\" , \"en\" : \"<p>Html text in english </p>\" }, \"id\" : \"identifier set in front > style > advance\" , \"class\" : \"class set in front > style > advance\" , } } The properties>id (or class) could be used to simplify widget access from code and communication with the design team. Working on widgets more easily To help you work on widget some helpers are available in the lumapps sdk from lumapps.api.base_client import BaseClientfrom lumapps . api . helpers import widgets as widgets_helper client = BaseClient ( token = \"<your_token>\" ) content = client . get_call ( \"content/get\" ) # get the lumapps content # return the first found widget with the property widgetType equal to video video_widget = widgets_helper . find_widget ( content , widgetType = \"video\" ) # return all widgets with the property widgetType equal to video all_video_widgets = widgets_helper . find_all_widgets ( content , widgetType = \"video\" ) # return the first found widgetwith the property uuid equal test widget_with_uuid_test = widgets_helper . find_widget ( content , uuid = \"test\" ) See Widgets for specific configurations. See Global Widgets for widgets defined at the instance level.","title":"Base"},{"location":"guides/content/#content","text":"","title":"Content"},{"location":"guides/content/#content-listing","text":"The lang parameter is mandatory for this call. You can add more filters, see apidoc from lumapps.api.base_client import BaseClient client = BaseClient ( token = \"<your_token>\" ) contents = client . get_call ( \"content/list\" , body = { \"lang\" : \"en\" })","title":"Content listing"},{"location":"guides/content/#content-details","text":"This call is designed for content view content = client . get_call ( \"content/get\" , uid = \"5386179638984704\" ) NB: content.uid = content.id","title":"Content details"},{"location":"guides/content/#content-update","text":"Get content with action=PAGE_EDIT to have all the relevant data. content = client . get_call ( \"content/get\" , uid = \"5386179638984704\" , action = \"PAGE_EDIT\" ) Note: the version number is used to lock the resource. You have to put the last version number of a content in version to be allowed to update a content, else a bad request: \"CONTENT_NOT_UP_TO_DATE\" will be returned.","title":"Content update"},{"location":"guides/content/#content-creation","text":"The simplest way to create content is to use an existing template. This template will define all design configurations. base_template = api . get_call ( \"template/get\" , uid = \"123456789\" ) # note : it's possible to use a content as well. new_content = { \"type\" : \"page\" , # fixed \"template\" : base_template [ template ], # copy all the structure (see below for details) \"customContentType\" : base_template [ \"customContentType\" ], # custom content type id \"customer\" : base_template [ \"customer\" ], # customer id \"instance\" : base_template [ \"instance\" ], # instance id \"feedKeys\" : base_template [ \"feedKeys\" ], # it's the `visibleBy` field in the front interface. \"publicationDate\" : base_template [ publicationDate ], \"title\" : { \"en\" : \"created content from api\" }, \"slug\" : { \"en\" : \"create-content-from-api\" }, # WARNING : should be unique per instance \"metadata\" : [], # if any, provide metadata value uid } new_content_saved = client . get_call ( \"content/save\" , body = new_content ) To create content on behalf of other users you have to be connected with this user.","title":"Content creation"},{"location":"guides/content/#objects-explanation","text":"","title":"Objects explanation"},{"location":"guides/content/#content_1","text":"{ \"id\" : \"134567\" , \"type\" : \"page\" , \"status\" : \"LIVE|ARCHIVED\" , \"canonicalUrl\" : \"https://...\" , \"thumbnail\" : \"media library url\" , \"publicationDate\" : \"2018-06-29T09:28:34.346124\" , \"updatedAt\" : \"2018-06-29T09:28:34.346124\" , \"authorId\" : \"23142536879786754\" # set at creation time with the connected user }","title":"Content"},{"location":"guides/content/#contentcanonicalurl","text":"The canonicalUrl property contains the links that can be used to access the content.","title":"Content.canonicalUrl"},{"location":"guides/content/#contenttemplate","text":"The template property contains the whole page structure. Widgets are directly placed in this structure. { \"template\" : { \"components\" : [ { \"type\" : \"row\" , \"cells\" : [ { \"type\" : \"cell\" , \"components\" :[ { \"type\" : \"row|widget\" , ... }, ... ] }, ... ] }, ... ] } } You should iterate over all the structure to find the correct widget to update.","title":"Content.template"},{"location":"guides/content/#contentthumbnail","text":"A content can have a thumbnail, it's a picture associated with it and shows when listed in a content-list widget for instance. When adding a thumbnail to a content you need to provide the blob key of the uploaded image in the thumbnail attribute. To upload and obtain that blobkey see here .","title":"Content.thumbnail"},{"location":"guides/content/#update-an-existing-thumbnail","text":"# First get the content content = api . get_call ( 'content/get' , uid = \"6448894901878784\" ) # Update the thumbnail field by the media blob key new_content = { ... \"thumbnail\" : < your_new_blob_key > } # Resave the content client . get_call ( 'content/save' , body = new_content )","title":"Update an existing thumbnail"},{"location":"guides/content/#widget","text":"Widgets are placed in the content.template tree. Widgets can be identified by their UUID { \"type\" : \"widget\" , \"widgetType\" : \"contact|html|...\" , \"uuid\" : \"ca2bd99c-7b7e-11e8-8255-abba20e0e453\" , } Specific configurations are in properties . Ex for an HTML widget: { \"type\" : \"widget\" , \"widgetType\" : \"html\" , \"uuid\" : \"ca2bd99c-...\" , \"properties\" : { \"content\" : { \"fr\" : \"<p>Contenu html en fran\u00e7ais</p>\" , \"en\" : \"<p>Html text in english </p>\" }, \"id\" : \"identifier set in front > style > advance\" , \"class\" : \"class set in front > style > advance\" , } } The properties>id (or class) could be used to simplify widget access from code and communication with the design team. Working on widgets more easily To help you work on widget some helpers are available in the lumapps sdk from lumapps.api.base_client import BaseClientfrom lumapps . api . helpers import widgets as widgets_helper client = BaseClient ( token = \"<your_token>\" ) content = client . get_call ( \"content/get\" ) # get the lumapps content # return the first found widget with the property widgetType equal to video video_widget = widgets_helper . find_widget ( content , widgetType = \"video\" ) # return all widgets with the property widgetType equal to video all_video_widgets = widgets_helper . find_all_widgets ( content , widgetType = \"video\" ) # return the first found widgetwith the property uuid equal test widget_with_uuid_test = widgets_helper . find_widget ( content , uuid = \"test\" ) See Widgets for specific configurations. See Global Widgets for widgets defined at the instance level.","title":"Widget"},{"location":"guides/content_template/","text":"Content template \u00a4 This notebook aims to explain roughtly how to manipulate a template from LumApps with the LumApps SDK. The use case could be to use get a given template, fill it with your content and save it as a new content on your site. First step - get the template id \u00a4 After your created your content get's is content id. The id is in the url of your template https://your_instance/content/edit/6677628373958656?isTemplate=true Here our template id is 6677628373958656 This example as 2 rows with each one containing 2 columns. Second step - Get the template in python \u00a4 import copy from lumapps.api.base_client import BaseClient client = BaseClient ( token = \" {your_token} \" ) template_id = \" {your_template_id} \" template = client . get_call ( \"template/get\" , uid = template_id ) # We copy it to keep the original as is and maybe use it later to fill it with different content template_copy = copy . deepcopy ( template ) Now you have the template. A template is a big json object that can be seen as: Template => Components => Cells => Widgets or Template => Rows => Columns => Widgets So for instance if I want all the widgets of the first row and second column I do: [Out]: html user content-list Third step - modify the template in place \u00a4 Now that we have the content and know how it is layed out, replacing it should be easy. We just have to found where in each widget the content is and replace it. The thing is that some widgets have particularities and so the content is not always in the content key The content for an html is in the properties of each widget and it's a dictionnary with keys that are the language. [Out]: {'fr': ['<p> Modified button </p>']} Whereas the content for a user_list is a list of ids and its under the userIds key [Out]: ['5993218790653952'] Another case is the content for a content list is a list of ids and its under the contents key [Out]: ['5145730009006080'] So now let change something in the template first_row_second_column [ 0 ][ 'properties' ][ 'content' ][ 'fr' ] = '<p> Modified button </p>' So, now we can replace this content and so we'll have a template object filled with what we want. Fourth step - Save the template in a content \u00a4 The last step is to save the actual content, so we have to create the basic object for a content and add to it the filled template The only annoying step before is to get the ids of the feeds we restrict this content to. This is required by the API. [Out]: '5670405876482048' Let save it [Out]: Done Result \u00a4","title":"Template"},{"location":"guides/content_template/#content-template","text":"This notebook aims to explain roughtly how to manipulate a template from LumApps with the LumApps SDK. The use case could be to use get a given template, fill it with your content and save it as a new content on your site.","title":"Content template"},{"location":"guides/content_template/#first-step-get-the-template-id","text":"After your created your content get's is content id. The id is in the url of your template https://your_instance/content/edit/6677628373958656?isTemplate=true Here our template id is 6677628373958656 This example as 2 rows with each one containing 2 columns.","title":"First step - get the template id"},{"location":"guides/content_template/#second-step-get-the-template-in-python","text":"import copy from lumapps.api.base_client import BaseClient client = BaseClient ( token = \" {your_token} \" ) template_id = \" {your_template_id} \" template = client . get_call ( \"template/get\" , uid = template_id ) # We copy it to keep the original as is and maybe use it later to fill it with different content template_copy = copy . deepcopy ( template ) Now you have the template. A template is a big json object that can be seen as: Template => Components => Cells => Widgets or Template => Rows => Columns => Widgets So for instance if I want all the widgets of the first row and second column I do: [Out]: html user content-list","title":"Second step - Get the template in python"},{"location":"guides/content_template/#third-step-modify-the-template-in-place","text":"Now that we have the content and know how it is layed out, replacing it should be easy. We just have to found where in each widget the content is and replace it. The thing is that some widgets have particularities and so the content is not always in the content key The content for an html is in the properties of each widget and it's a dictionnary with keys that are the language. [Out]: {'fr': ['<p> Modified button </p>']} Whereas the content for a user_list is a list of ids and its under the userIds key [Out]: ['5993218790653952'] Another case is the content for a content list is a list of ids and its under the contents key [Out]: ['5145730009006080'] So now let change something in the template first_row_second_column [ 0 ][ 'properties' ][ 'content' ][ 'fr' ] = '<p> Modified button </p>' So, now we can replace this content and so we'll have a template object filled with what we want.","title":"Third step - modify the template in place"},{"location":"guides/content_template/#fourth-step-save-the-template-in-a-content","text":"The last step is to save the actual content, so we have to create the basic object for a content and add to it the filled template The only annoying step before is to get the ids of the feeds we restrict this content to. This is required by the API. [Out]: '5670405876482048' Let save it [Out]: Done","title":"Fourth step - Save the template in a content"},{"location":"guides/content_template/#result","text":"","title":"Result"},{"location":"guides/groups/","text":"Group in LumApps are named Feeds in the api and object definition. List \u00a4 Groups can be defined at platform or instance level. Get the list of group client . get_call ( \"feed/list\" ) # platform and instances client . get_call ( \"feed/list\" , instance = \"1234\" ) # one instance Groups have a type , get details with client . get_call ( \"feedtype/list\" ) # platform only client . get_call ( \"feedtype/list\" , instance = \"12345\" ) # one one instance Create a group \u00a4 from lumapps.api.base_client import BaseClient client = BaseClient ( token = \"<your_token>\" ) group = { \"customer\" : \"123456789\" , \"name\" : \"Display name\" , \"functionalInnerId\" : \"any, for external use only\" , \"type\" : \"12345678\" , # feed type } } new_group = client . get_call ( \"feed/save\" , body = group ) Update a group \u00a4 group = client . get_call ( \"feed/get\" , uid = feedUid ) # change group name then save group = client . get_call ( \"feed/save\" , body = group ) Delete a group \u00a4 # user feed/delete with the feed ui client . get_call ( \"feed/delete\" , uid = feedUid ) Create a group synced with a existing google or microsoft group \u00a4 You first need to know the identity provider configuration: idps = client . get_call ( \"customer/identityprovider/list\" ) \"\"\" {\"items\": [ { \"name\": \"customName\", \"domain\": \"mydomain.net\", \"id\": \"a913b61f-09ed-4e97-b3ec-cbbf714fe10e\", \"type\": \"google|microsoft|mail|okta\", \"customerKey\": \"123456789\", \"nbUsers\": 42, ... }, ... ]} \"\"\" Then create a feed: feed = { \"customer\" : \"123456789\" , \"name\" : \"Display name\" , \"groups\" : [ { \"identityProvider\" : \"a913b61f-09ed-4e97-b3ec-cbbf714fe10e\" , \"group\" : \"the google email of the group\" , } ], \"functionalInnerId\" : \"any, for external use only\" , \"type\" : \"12345678\" , # feed type } } new_group = api . get_call ( \"feed/save\" , body = group ) Notes: - you can add one group per identity provider. If you try to add more than one group per idp, the last one will be preserved. - the group email should exist, in the other case the api will return an error. - only google and microsoft idp supports the group synchronization. - members are retrieved asynchronously by the server, you may need to wait before doing a member list request to have the full list of members. List the members of one or many feed \u00a4 use the user/list endpoint with the feed id in the feeds filter. feed_members = api . get_call ( \"user/list\" , feeds = [ '1345' ]) update members of a group \u00a4 from lumapps.api.base_client import BaseClient client = BaseClient ( token = \"<your_token>\" ) body = { \"feed\" : \"1234\" , \"addedUsers\" : [ \"user_email_to add\" , ... ], \"removedUsers\" : [ \"user_email_to remove\" , ... ]} } client . get_call ( \"feed/subscribers/save\" , body = body )","title":"Groups"},{"location":"guides/groups/#list","text":"Groups can be defined at platform or instance level. Get the list of group client . get_call ( \"feed/list\" ) # platform and instances client . get_call ( \"feed/list\" , instance = \"1234\" ) # one instance Groups have a type , get details with client . get_call ( \"feedtype/list\" ) # platform only client . get_call ( \"feedtype/list\" , instance = \"12345\" ) # one one instance","title":"List"},{"location":"guides/groups/#create-a-group","text":"from lumapps.api.base_client import BaseClient client = BaseClient ( token = \"<your_token>\" ) group = { \"customer\" : \"123456789\" , \"name\" : \"Display name\" , \"functionalInnerId\" : \"any, for external use only\" , \"type\" : \"12345678\" , # feed type } } new_group = client . get_call ( \"feed/save\" , body = group )","title":"Create a group"},{"location":"guides/groups/#update-a-group","text":"group = client . get_call ( \"feed/get\" , uid = feedUid ) # change group name then save group = client . get_call ( \"feed/save\" , body = group )","title":"Update a group"},{"location":"guides/groups/#delete-a-group","text":"# user feed/delete with the feed ui client . get_call ( \"feed/delete\" , uid = feedUid )","title":"Delete a group"},{"location":"guides/groups/#create-a-group-synced-with-a-existing-google-or-microsoft-group","text":"You first need to know the identity provider configuration: idps = client . get_call ( \"customer/identityprovider/list\" ) \"\"\" {\"items\": [ { \"name\": \"customName\", \"domain\": \"mydomain.net\", \"id\": \"a913b61f-09ed-4e97-b3ec-cbbf714fe10e\", \"type\": \"google|microsoft|mail|okta\", \"customerKey\": \"123456789\", \"nbUsers\": 42, ... }, ... ]} \"\"\" Then create a feed: feed = { \"customer\" : \"123456789\" , \"name\" : \"Display name\" , \"groups\" : [ { \"identityProvider\" : \"a913b61f-09ed-4e97-b3ec-cbbf714fe10e\" , \"group\" : \"the google email of the group\" , } ], \"functionalInnerId\" : \"any, for external use only\" , \"type\" : \"12345678\" , # feed type } } new_group = api . get_call ( \"feed/save\" , body = group ) Notes: - you can add one group per identity provider. If you try to add more than one group per idp, the last one will be preserved. - the group email should exist, in the other case the api will return an error. - only google and microsoft idp supports the group synchronization. - members are retrieved asynchronously by the server, you may need to wait before doing a member list request to have the full list of members.","title":"Create a group synced with a existing google or microsoft group"},{"location":"guides/groups/#list-the-members-of-one-or-many-feed","text":"use the user/list endpoint with the feed id in the feeds filter. feed_members = api . get_call ( \"user/list\" , feeds = [ '1345' ])","title":"List the members of one or many feed"},{"location":"guides/groups/#update-members-of-a-group","text":"from lumapps.api.base_client import BaseClient client = BaseClient ( token = \"<your_token>\" ) body = { \"feed\" : \"1234\" , \"addedUsers\" : [ \"user_email_to add\" , ... ], \"removedUsers\" : [ \"user_email_to remove\" , ... ]} } client . get_call ( \"feed/subscribers/save\" , body = body )","title":"update members of a group"},{"location":"guides/lumapps_jwt/","text":"LumApps jwt \u00a4 If you need to verify the jwt token provided by lumapps the LumApps SDK provide an helper class for that purpose. It simply decodes the token for you, raise error if there is any problem and return the jwt payload. from lumapps.api.lumapps_jwt import LumappsJWT from lumapps.api.errors import LumappsJWT jwt_checker = LumappsJWT () token = \"<your_token>\" try : decoded_token = jwt_checker . decode ( token ) expect LumAppsJwtTokenExpiredError : print ( f \"The token expired ...\" )","title":"Lumapps jwt"},{"location":"guides/lumapps_jwt/#lumapps-jwt","text":"If you need to verify the jwt token provided by lumapps the LumApps SDK provide an helper class for that purpose. It simply decodes the token for you, raise error if there is any problem and return the jwt payload. from lumapps.api.lumapps_jwt import LumappsJWT from lumapps.api.errors import LumappsJWT jwt_checker = LumappsJWT () token = \"<your_token>\" try : decoded_token = jwt_checker . decode ( token ) expect LumAppsJwtTokenExpiredError : print ( f \"The token expired ...\" )","title":"LumApps jwt"},{"location":"guides/media/","text":"Media \u00a4 Uploading a media \u00a4 With the LumApps SDK \u00a4 We provide a helper method to ease the process of uploading a media from lumapps.api.base_client import BaseClient client = BaseClient ( token =< you_token > ) uploaded_media = client . upload_call ( \"path_to_my_file\" ) Manualy \u00a4 To upload a media you will need to get an upload and then upload the media itself. Obtaining an upload url To do that you'll need to call the document/uploadUrl/get endpoint (Make sure that you include you bearer token in the Authorization headers) Here is an example of the payload to send { \"fileName\" : \"Screenshot_2020-04-16 Design System.png\" , \"shared\" : true , \"success\" : \"/upload\" , \"parentPath\" : \"provider=local/site=5414442267049984\" , } The attributes are: FileName : The name of the file has it will appear in the media library once uploaded shared : Wether the file should be shared. If false the file will only be accessible to the user making the upload call (ie, the one authenticated by the token used in the call). success : Leave it to success parentPath : The path of where the media will be uploaded in the media library. If you want to upload in a specific folder, add /resource=<folder_id> at the end of path. See media path for more infos This will give you an uploadUrl to use next Uploading the media Now that you have an uploadUrl you will use it to send you file in a POST request (Make sure that you include you bearer token in the Authorization headers). This request in a regular multipart upload, response = self . client . post ( upload_url , files = { \"upload-file\" : ( name , file , mime_type )} ) If all goes well you should have successfully uploaded you file to the media library Media path \u00a4 In the LumApps library media are saved and retrieved via their path. This path identifies where the media is situated either in the LumApps library itself, or in a gdrive or microsoft drive. This path is of the form provider=<provider>/site=<site_id>/resource=<resource_id> and is called docPath or parentPath depending on the situation. The provider can be local (lumapps media library), drive (google drive). The site_id is the id of the LumApps site the media is on. The resource_id is the id of the media. The path is named docPath when you for instance retrieve the media and it identifies the media and is named parentPath when for instance you ask for an upload url and it identified where to upload. Blob key \u00a4 Upload an image and obtain the blob key \u00a4 First upload your file Once uploaded the api return the uploaded media of the form { \"uid\" : \"5278825007677440\" , \"isFolder\" : false , \"customContentTypeKey\" : null , \"updatedAt\" : \"2020-06-25T08:31:50.737799\" , \"isStarred\" : null , \"id\" : \"5278825007677440\" , \"createdAt\" : \"2020-06-25T08:31:50.751663\" , \"content\" : [ { \"lang\" : \"fr\" , \"mimeType\" : \"image/png\" , \"uuid\" : \"\" , \"url\" : \"https://sites.lumapps.com/serve/AMIfv95xFdNZT4x8ZCwYxVa4Ekr3hPU0ZRXJ_5na3mMJ_IwkfRW0-Vu-jY8DgPncGSq2UcAH-O_BnktwDOduHBccB8IgOCUQkoFv3WIzMH9FEOQVaX5uj7SA0BsdjPFdnqYKcOMRz4KPyBUPq66pXc3OpX3rycTxwQ/\" , \"type\" : \"image\" , \"size\" : 46667 , \"servingUrl\" : \"https://sites.lumapps.com/serve/AMIfv95xFdNZT4x8ZCwYxVa4Ekr3hPU0ZRXJ_5na3mMJ_IwkfRW0-Vu-jY8DgPncGSq2UcAH-O_BnktwDOduHBccB8IgOCUQkoFv3WIzMH9FEOQVaX5uj7SA0BsdjPFdnqYKcOMRz4KPyBUPq66pXc3OpX3rycTxwQ/\" , \"value\" : \"AMIfv95xFdNZT4x8ZCwYxVa4Ekr3hPU0ZRXJ_5na3mMJ_IwkfRW0-Vu-jY8DgPncGSq2UcAH-O_BnktwDOduHBccB8IgOCUQkoFv3WIzMH9FEOQVaX5uj7SA0BsdjPFdnqYKcOMRz4KPyBUPq66pXc3OpX3rycTxwQ\" , \"height\" : 717 , .... } ] } The blob key is the value property in content Obtain the blob key of an existing media \u00a4 To obtain an existing blob key you have 2 main solutions Get the media ( document/get or document/list ) via API's and extract the key. In that case the key should be in content -> value Copy/paste it from the LumApps admin. For that go to the media library => find your media => click on the three dots => Obtain a link This should give you a link the image, the blob key is containned in that link, between two / and after server/ (eg, https://sites.lumapps.com/serve/ AMIfv96jY01ZxeT4S-Yanb7h5SigIG-ZIVcYK1Th95Z2gOkJet6Trdl2hntG8C_ x17K0wqFms2cLOCIYPSreUsDsTQPyjVVZGh-IOJxaxLmmz6IxnWw1W0HapKyrwAfJsmNQsLwg6wNnbOrLZdeJdsMgGt_GYiDSb0pr uLlkBn5toPLNK1Cd5gykYLu4UBEdgsvyksHOcwYxf6rUwSJGGD3vkL_C0tz_3If5vIPwo42nEAvIwU2Vx7WeI__cK9Tq2CooTSTn L37iMKBsPxuGNXYLVLEApbHGJBNtoKiT_tswmKsL8Ub3_TBrtSZIOhnjajucQCZDWDK0Gsx4R6K7zT7NcQtwA /tricot2.jpg)","title":"Media"},{"location":"guides/media/#media","text":"","title":"Media"},{"location":"guides/media/#uploading-a-media","text":"","title":"Uploading a media"},{"location":"guides/media/#with-the-lumapps-sdk","text":"We provide a helper method to ease the process of uploading a media from lumapps.api.base_client import BaseClient client = BaseClient ( token =< you_token > ) uploaded_media = client . upload_call ( \"path_to_my_file\" )","title":"With the LumApps SDK"},{"location":"guides/media/#manualy","text":"To upload a media you will need to get an upload and then upload the media itself. Obtaining an upload url To do that you'll need to call the document/uploadUrl/get endpoint (Make sure that you include you bearer token in the Authorization headers) Here is an example of the payload to send { \"fileName\" : \"Screenshot_2020-04-16 Design System.png\" , \"shared\" : true , \"success\" : \"/upload\" , \"parentPath\" : \"provider=local/site=5414442267049984\" , } The attributes are: FileName : The name of the file has it will appear in the media library once uploaded shared : Wether the file should be shared. If false the file will only be accessible to the user making the upload call (ie, the one authenticated by the token used in the call). success : Leave it to success parentPath : The path of where the media will be uploaded in the media library. If you want to upload in a specific folder, add /resource=<folder_id> at the end of path. See media path for more infos This will give you an uploadUrl to use next Uploading the media Now that you have an uploadUrl you will use it to send you file in a POST request (Make sure that you include you bearer token in the Authorization headers). This request in a regular multipart upload, response = self . client . post ( upload_url , files = { \"upload-file\" : ( name , file , mime_type )} ) If all goes well you should have successfully uploaded you file to the media library","title":"Manualy"},{"location":"guides/media/#media-path","text":"In the LumApps library media are saved and retrieved via their path. This path identifies where the media is situated either in the LumApps library itself, or in a gdrive or microsoft drive. This path is of the form provider=<provider>/site=<site_id>/resource=<resource_id> and is called docPath or parentPath depending on the situation. The provider can be local (lumapps media library), drive (google drive). The site_id is the id of the LumApps site the media is on. The resource_id is the id of the media. The path is named docPath when you for instance retrieve the media and it identifies the media and is named parentPath when for instance you ask for an upload url and it identified where to upload.","title":"Media path"},{"location":"guides/media/#blob-key","text":"","title":"Blob key"},{"location":"guides/media/#upload-an-image-and-obtain-the-blob-key","text":"First upload your file Once uploaded the api return the uploaded media of the form { \"uid\" : \"5278825007677440\" , \"isFolder\" : false , \"customContentTypeKey\" : null , \"updatedAt\" : \"2020-06-25T08:31:50.737799\" , \"isStarred\" : null , \"id\" : \"5278825007677440\" , \"createdAt\" : \"2020-06-25T08:31:50.751663\" , \"content\" : [ { \"lang\" : \"fr\" , \"mimeType\" : \"image/png\" , \"uuid\" : \"\" , \"url\" : \"https://sites.lumapps.com/serve/AMIfv95xFdNZT4x8ZCwYxVa4Ekr3hPU0ZRXJ_5na3mMJ_IwkfRW0-Vu-jY8DgPncGSq2UcAH-O_BnktwDOduHBccB8IgOCUQkoFv3WIzMH9FEOQVaX5uj7SA0BsdjPFdnqYKcOMRz4KPyBUPq66pXc3OpX3rycTxwQ/\" , \"type\" : \"image\" , \"size\" : 46667 , \"servingUrl\" : \"https://sites.lumapps.com/serve/AMIfv95xFdNZT4x8ZCwYxVa4Ekr3hPU0ZRXJ_5na3mMJ_IwkfRW0-Vu-jY8DgPncGSq2UcAH-O_BnktwDOduHBccB8IgOCUQkoFv3WIzMH9FEOQVaX5uj7SA0BsdjPFdnqYKcOMRz4KPyBUPq66pXc3OpX3rycTxwQ/\" , \"value\" : \"AMIfv95xFdNZT4x8ZCwYxVa4Ekr3hPU0ZRXJ_5na3mMJ_IwkfRW0-Vu-jY8DgPncGSq2UcAH-O_BnktwDOduHBccB8IgOCUQkoFv3WIzMH9FEOQVaX5uj7SA0BsdjPFdnqYKcOMRz4KPyBUPq66pXc3OpX3rycTxwQ\" , \"height\" : 717 , .... } ] } The blob key is the value property in content","title":"Upload an image and obtain the blob key"},{"location":"guides/media/#obtain-the-blob-key-of-an-existing-media","text":"To obtain an existing blob key you have 2 main solutions Get the media ( document/get or document/list ) via API's and extract the key. In that case the key should be in content -> value Copy/paste it from the LumApps admin. For that go to the media library => find your media => click on the three dots => Obtain a link This should give you a link the image, the blob key is containned in that link, between two / and after server/ (eg, https://sites.lumapps.com/serve/ AMIfv96jY01ZxeT4S-Yanb7h5SigIG-ZIVcYK1Th95Z2gOkJet6Trdl2hntG8C_ x17K0wqFms2cLOCIYPSreUsDsTQPyjVVZGh-IOJxaxLmmz6IxnWw1W0HapKyrwAfJsmNQsLwg6wNnbOrLZdeJdsMgGt_GYiDSb0pr uLlkBn5toPLNK1Cd5gykYLu4UBEdgsvyksHOcwYxf6rUwSJGGD3vkL_C0tz_3If5vIPwo42nEAvIwU2Vx7WeI__cK9Tq2CooTSTn L37iMKBsPxuGNXYLVLEApbHGJBNtoKiT_tswmKsL8Ub3_TBrtSZIOhnjajucQCZDWDK0Gsx4R6K7zT7NcQtwA /tricot2.jpg)","title":"Obtain the blob key of an existing media"},{"location":"guides/metadata/","text":"Metadata \u00a4 Metadata kind \u00a4 from lumapps.api.base_client import BaseClient client = BaseClient ( token = \"<your_token>\" ) metadata_kind = client . get_call ( \"metadata/list\" , body = { \"emptyParent\" : \"true\" , \"lang\" : \"fr\" , }) print ( metadata_kind ) >>> [{ \"customer\" : \"5678444713082880\" , \"multiple\" : \"false\" , \"isVisibleFront\" : \"false\" , \"displayInFilter\" : \"false\" , \"instance\" : \"6660333004128256\" , \"sortOrder\" : \"22\" , \"updatedAt\" : \"2019-04-03T14:07:10.672665\" , \"uid\" : \"6298100337213440\" , \"heritable\" : \"false\" , \"familyKey\" : \"6298100337213440\" , # <- same Id \"id\" : \"6298100337213440\" , # <- same Id \"createdAt\" : \"2019-04-03T14:07:10.672871\" , \"name\" :{ \"en\" : \"content\" , } }] Metadata values \u00a4 from lumapps.api.base_client import BaseClient client = BaseClient ( token = \"<your_token>\" ) metadata_values = client . get_call ( 'metadata' , 'list' , body = { \"familyId\" : \"6298100337213440\" , # <- /!\\ \"parent\" : \"6298100337213440\" , # <- /!\\ \"lang\" : \"fr\" , }) print ( metadata_values ) [ { \"customer\" : \"5678444713082880\" , \"multiple\" : false , \"isVisibleFront\" : false , \"displayInFilter\" : false , \"instance\" : \"6660333004128256\" , \"sortOrder\" : \"0\" , \"updatedAt\" : \"2019-04-03T14:07:18.363623\" , \"uid\" : \"5631838787469312\" , \"id\" : \"5631838787469312\" , \"heritable\" : false , \"parent\" : \"6298100337213440\" , # < - /!\\ \"familyKey\" : \"6298100337213440\" , # < - /!\\ \"createdAt\" : \"2019-04-03T14:07:18.363833\" , \"name\" : { \"en\" : \"C1\" } }, { \"customer\" : \"5678444713082880\" , \"multiple\" : false , \"isVisibleFront\" : false , \"displayInFilter\" : false , \"instance\" : \"6660333004128256\" , \"sortOrder\" : \"1\" , \"updatedAt\" : \"2019-04-03T14:07:23.464679\" , \"uid\" : \"5428492134776832\" , \"id\" : \"5428492134776832\" , \"heritable\" : false , \"parent\" : \"6298100337213440\" , \"familyKey\" : \"6298100337213440\" , \"createdAt\" : \"2019-04-03T14:07:23.464777\" , \"name\" : { \"en\" : \"C2\" } } ] Metadata Sorting \u00a4 The sortOrder property store a relative position of the element in the list. To reorder a list, you have to save each element with in the sortOrder property the value of the new index (the one in the new list). The initial list 'element': 'A', sortOrder: -5 'element': 'B', sortOrder: -4 'element': 'C', sortOrder: -3 'element': 'D', sortOrder: -2 'element': 'E', sortOrder: -1 'element': 'F', sortOrder: 1 'element': 'G', sortOrder: 2 Reorder my list 'element': 'G', sortOrder: 2 'element': 'F', sortOrder: 1 'element': 'E', sortOrder: -1 'element': 'D', sortOrder: -2 'element': 'C', sortOrder: -3 'element': 'B', sortOrder: -4 'element': 'A', sortOrder: -5 Update indexes 'element': 'G', sortOrder: 1 'element': 'F', sortOrder: 2 'element': 'E', sortOrder: 3 'element': 'D', sortOrder: 4 'element': 'C', sortOrder: 5 'element': 'B', sortOrder: 6 'element': 'A', sortOrder: 7 save each element, and wait a few seconds (4-5) between 2 saves Code sample import time from lumapps.api.base_client import BaseClient client = BaseClient ( token = \"<your_token>\" ) # Get metadata list metadata_list = client . get_call ( \"metadata/list\" , instance = SITE_ID , familyId = METADATA_ID , parent = METADATA_ID ) # sort the list by the english name def key ( meta ): return meta [ 'name' ][ 'en' ] . lower () metadata_list = sorted ( metadata_list , key = key ) # recompute new index and save each metadata for index , metadata in enumerate ( metadata_list ): print ( f \"Saving metadata { metadata [ 'name' ] } \" ) metadata [ 'sortOrder' ] = index client . get_call ( \"metadata/save\" , body = metadata ) time . sleep ( 4 ) # important to let the server recompute new indexes","title":"Metadata"},{"location":"guides/metadata/#metadata","text":"","title":"Metadata"},{"location":"guides/metadata/#metadata-kind","text":"from lumapps.api.base_client import BaseClient client = BaseClient ( token = \"<your_token>\" ) metadata_kind = client . get_call ( \"metadata/list\" , body = { \"emptyParent\" : \"true\" , \"lang\" : \"fr\" , }) print ( metadata_kind ) >>> [{ \"customer\" : \"5678444713082880\" , \"multiple\" : \"false\" , \"isVisibleFront\" : \"false\" , \"displayInFilter\" : \"false\" , \"instance\" : \"6660333004128256\" , \"sortOrder\" : \"22\" , \"updatedAt\" : \"2019-04-03T14:07:10.672665\" , \"uid\" : \"6298100337213440\" , \"heritable\" : \"false\" , \"familyKey\" : \"6298100337213440\" , # <- same Id \"id\" : \"6298100337213440\" , # <- same Id \"createdAt\" : \"2019-04-03T14:07:10.672871\" , \"name\" :{ \"en\" : \"content\" , } }]","title":"Metadata kind"},{"location":"guides/metadata/#metadata-values","text":"from lumapps.api.base_client import BaseClient client = BaseClient ( token = \"<your_token>\" ) metadata_values = client . get_call ( 'metadata' , 'list' , body = { \"familyId\" : \"6298100337213440\" , # <- /!\\ \"parent\" : \"6298100337213440\" , # <- /!\\ \"lang\" : \"fr\" , }) print ( metadata_values ) [ { \"customer\" : \"5678444713082880\" , \"multiple\" : false , \"isVisibleFront\" : false , \"displayInFilter\" : false , \"instance\" : \"6660333004128256\" , \"sortOrder\" : \"0\" , \"updatedAt\" : \"2019-04-03T14:07:18.363623\" , \"uid\" : \"5631838787469312\" , \"id\" : \"5631838787469312\" , \"heritable\" : false , \"parent\" : \"6298100337213440\" , # < - /!\\ \"familyKey\" : \"6298100337213440\" , # < - /!\\ \"createdAt\" : \"2019-04-03T14:07:18.363833\" , \"name\" : { \"en\" : \"C1\" } }, { \"customer\" : \"5678444713082880\" , \"multiple\" : false , \"isVisibleFront\" : false , \"displayInFilter\" : false , \"instance\" : \"6660333004128256\" , \"sortOrder\" : \"1\" , \"updatedAt\" : \"2019-04-03T14:07:23.464679\" , \"uid\" : \"5428492134776832\" , \"id\" : \"5428492134776832\" , \"heritable\" : false , \"parent\" : \"6298100337213440\" , \"familyKey\" : \"6298100337213440\" , \"createdAt\" : \"2019-04-03T14:07:23.464777\" , \"name\" : { \"en\" : \"C2\" } } ]","title":"Metadata values"},{"location":"guides/metadata/#metadata-sorting","text":"The sortOrder property store a relative position of the element in the list. To reorder a list, you have to save each element with in the sortOrder property the value of the new index (the one in the new list). The initial list 'element': 'A', sortOrder: -5 'element': 'B', sortOrder: -4 'element': 'C', sortOrder: -3 'element': 'D', sortOrder: -2 'element': 'E', sortOrder: -1 'element': 'F', sortOrder: 1 'element': 'G', sortOrder: 2 Reorder my list 'element': 'G', sortOrder: 2 'element': 'F', sortOrder: 1 'element': 'E', sortOrder: -1 'element': 'D', sortOrder: -2 'element': 'C', sortOrder: -3 'element': 'B', sortOrder: -4 'element': 'A', sortOrder: -5 Update indexes 'element': 'G', sortOrder: 1 'element': 'F', sortOrder: 2 'element': 'E', sortOrder: 3 'element': 'D', sortOrder: 4 'element': 'C', sortOrder: 5 'element': 'B', sortOrder: 6 'element': 'A', sortOrder: 7 save each element, and wait a few seconds (4-5) between 2 saves Code sample import time from lumapps.api.base_client import BaseClient client = BaseClient ( token = \"<your_token>\" ) # Get metadata list metadata_list = client . get_call ( \"metadata/list\" , instance = SITE_ID , familyId = METADATA_ID , parent = METADATA_ID ) # sort the list by the english name def key ( meta ): return meta [ 'name' ][ 'en' ] . lower () metadata_list = sorted ( metadata_list , key = key ) # recompute new index and save each metadata for index , metadata in enumerate ( metadata_list ): print ( f \"Saving metadata { metadata [ 'name' ] } \" ) metadata [ 'sortOrder' ] = index client . get_call ( \"metadata/save\" , body = metadata ) time . sleep ( 4 ) # important to let the server recompute new indexes","title":"Metadata Sorting"},{"location":"guides/notifications/","text":"Notifications are well describe on the official documentation Additional use case: Send notification to a group of users : You need to retrieve the target group id, put it in the feedKeys list and remove the recipientEmail properties. n o t i f ica t io n _body = { \"feedKeys\" : [ \"4589840722165660\" ], \"customerId\" : \"123456789\" , \"instanceId\" : \"12345678\" , \"type\" : \"custom\" , \"customType\" : \"custom type identifier\" , \"functionalInnerId\" : \"external-reference\" , \"senderEmail\" : \"an admin.account@domain.com\" , \"link\" : { \"fr\" : \"https://myexternalapplicationurl\" }, \"title\" : { \"en\" : \"Notification title\" }, \"description\" : { \"en\" : \"Notification content\" }, \"group\" : true , \"groupName\" : { \"en\" : \"Group name\" }, \"groupDescription\" : { \"en\" : \"Group description\" }, \"isReadOnClick\" : true , \"notifyAuthor\" : false , }","title":"Notifications"},{"location":"guides/roles/","text":"Role \u00a4 You can easly create, modify, delete or list roles on your instance with the sdk. List roles \u00a4 from lumapps.api.base_client import BaseClient client = BaseClient ( token = \"<your_token>\" ) roles = client . get_call ( \"role/list\" , instance = site_id ) ``` ## __Create a specific role__ To create a role you need to create an object like the following one ``` python from lumapps.api.base_client import BaseClient client = BaseClient ( token = \"<your_token>\" ) my_role = { \"authorizations\" : authorizations , \"description\" : { \"fr\" : \"Ma description en francais\" }, \"instance\" : site_id , \"feeds\" : [ \"518815757015446\" ], \"name\" : \"My custom role\" } client . get_call ( \"role/save\" , body = my_role ) Here we have: authorization: The authorization associated to that role ( See below ) description: A description of the role (can be translated in multiple languages) instance: The instance id of the instance where to create that role feeds: The ids of the groups that have the rights on that role. At least one is required. name: The name of the role Authorizations \u00a4 authorization_1 = { \"actions\" : actions , \"feeds\" : [ \"518815757015496\" ], \"metadata\" : [ \"51881575701549\" ] } authorizations = [ authorization_1 ] actions: A list of actions ( See below ) feeds: A list of ids of the groups targeted by the given actions metadata: A list if ids of the metadatas associated to the givena actions. Actions \u00a4 action_1 = { \"type\" : \"EDIT\" , \"name\" : \"PAGE\" } action_2 = { \"type\" : \"READ\" , \"name\" : \"PAGE\" } actions = [ action_1 , action_2 ] type: The type of action. The accepted types are listed below FEED GROUP GLOBAL USER NEWS NEWSLETTER COMMUNITY CUSTOM ANALYTICS GAMIFICATION DIRECTORY_ENTRY STYLE MEDIA DIRECTORY POST CUSTOM_CONTENT TUTORIAL TARGET RESELLER MENU INSTANCE ROLE TEMPLATE PAGE METADATA name: The name of the action. The accepted names are listed below READ DROP PUBLISH ADMIN EDIT ARCHIVE DELETE Update a role \u00a4 To update a role the recommanded way is the following: get it change/add the informations you want re-save it. ```python from lumapps.api.base_client import BaseClient client = BaseClient(token=\" \") Get the role \u00a4 role = client.get_call(\"role/get\", uid=role_uid) Update it ... \u00a4 role[\"name\"] = \"New role name\" Save the updated role \u00a4 client.get_call(\"role/save\", body=role)","title":"Roles"},{"location":"guides/roles/#role","text":"You can easly create, modify, delete or list roles on your instance with the sdk.","title":"Role"},{"location":"guides/roles/#list-roles","text":"from lumapps.api.base_client import BaseClient client = BaseClient ( token = \"<your_token>\" ) roles = client . get_call ( \"role/list\" , instance = site_id ) ``` ## __Create a specific role__ To create a role you need to create an object like the following one ``` python from lumapps.api.base_client import BaseClient client = BaseClient ( token = \"<your_token>\" ) my_role = { \"authorizations\" : authorizations , \"description\" : { \"fr\" : \"Ma description en francais\" }, \"instance\" : site_id , \"feeds\" : [ \"518815757015446\" ], \"name\" : \"My custom role\" } client . get_call ( \"role/save\" , body = my_role ) Here we have: authorization: The authorization associated to that role ( See below ) description: A description of the role (can be translated in multiple languages) instance: The instance id of the instance where to create that role feeds: The ids of the groups that have the rights on that role. At least one is required. name: The name of the role","title":"List roles"},{"location":"guides/roles/#authorizations","text":"authorization_1 = { \"actions\" : actions , \"feeds\" : [ \"518815757015496\" ], \"metadata\" : [ \"51881575701549\" ] } authorizations = [ authorization_1 ] actions: A list of actions ( See below ) feeds: A list of ids of the groups targeted by the given actions metadata: A list if ids of the metadatas associated to the givena actions.","title":"Authorizations"},{"location":"guides/roles/#actions","text":"action_1 = { \"type\" : \"EDIT\" , \"name\" : \"PAGE\" } action_2 = { \"type\" : \"READ\" , \"name\" : \"PAGE\" } actions = [ action_1 , action_2 ] type: The type of action. The accepted types are listed below FEED GROUP GLOBAL USER NEWS NEWSLETTER COMMUNITY CUSTOM ANALYTICS GAMIFICATION DIRECTORY_ENTRY STYLE MEDIA DIRECTORY POST CUSTOM_CONTENT TUTORIAL TARGET RESELLER MENU INSTANCE ROLE TEMPLATE PAGE METADATA name: The name of the action. The accepted names are listed below READ DROP PUBLISH ADMIN EDIT ARCHIVE DELETE","title":"Actions"},{"location":"guides/roles/#update-a-role","text":"To update a role the recommanded way is the following: get it change/add the informations you want re-save it. ```python from lumapps.api.base_client import BaseClient client = BaseClient(token=\" \")","title":"Update a role"},{"location":"guides/roles/#get-the-role","text":"role = client.get_call(\"role/get\", uid=role_uid)","title":"Get the role"},{"location":"guides/roles/#update-it","text":"role[\"name\"] = \"New role name\"","title":"Update it ..."},{"location":"guides/roles/#save-the-updated-role","text":"client.get_call(\"role/save\", body=role)","title":"Save the updated role"},{"location":"guides/user_base/","text":"Users \u00a4 List all your LumApps platform users \u00a4 To list the users of your platform we'll use the /user/list endpoint. To get all users at once you can use the get_call method provided by the BaseClient. from lumapps.api.base_client import BaseClient client = BaseClient ( token = \"<your_token>\" ) users = client . get_call ( \"user/list\" ) You can also add additional parameters according to the documentation For instance, if you want to list the users of your platform but filter only the ones that are enabled you will do from lumapps.api.base_client import BaseClient client = BaseClient ( token = \"<your_token>\" ) users = client . get_call ( \"user/list\" , status = \"enabled\" ) Alternatively you can fetch these users page by page using the iter_call method. Get a particular user \u00a4 To get a particular user you can do: from lumapps.api.base_client import BaseClient client = BaseClient ( token = \"<your_token>\" ) email = \"<the_user_email>\" user = client . get_call ( \"user/get\" , email = email ) Get the authenticated user \u00a4 To get the user authenticated by the token you provided to the BaseClient you can do: from lumapps.api.base_client import BaseClient client = BaseClient ( token = \"<your_token>\" ) me = client . get_call ( \"user/get\" ) Create a new user \u00a4 from lumapps.api.base_client import BaseClient client = BaseClient ( token = \"<your_token>\" ) body = { \"email\" : \"test@test.com\" , \"accountType\" : \"external\" } saved_user = client . get_call ( \"user/save\" , body = body ) Update an existing user \u00a4 To update an existing user the best pratice is to get it, modify it and then save it. from lumapps.api.base_client import BaseClient client = BaseClient ( token = \"<your_token>\" ) # Get tge user email = \"<user_email>\" user = client . get_call ( \"user/get\" , email = email ) # Update it user [ \"firstName\" ] = \"Jacques\" # save it saved_user = client . get_call ( \"user/save\" , body = user ) Deactivate a user \u00a4 To deactivate a user you need to set his status to disabled from lumapps.api.base_client import BaseClient client = BaseClient ( token = \"<your_token>\" ) # Get tge user email = \"<user_email>\" user = client . get_call ( \"user/get\" , email = email ) # Update his status user [ \"status\" ] = \"disabled\" # save it saved_user = client . get_call ( \"user/save\" , body = user )","title":"Basics"},{"location":"guides/user_base/#users","text":"","title":"Users"},{"location":"guides/user_base/#list-all-your-lumapps-platform-users","text":"To list the users of your platform we'll use the /user/list endpoint. To get all users at once you can use the get_call method provided by the BaseClient. from lumapps.api.base_client import BaseClient client = BaseClient ( token = \"<your_token>\" ) users = client . get_call ( \"user/list\" ) You can also add additional parameters according to the documentation For instance, if you want to list the users of your platform but filter only the ones that are enabled you will do from lumapps.api.base_client import BaseClient client = BaseClient ( token = \"<your_token>\" ) users = client . get_call ( \"user/list\" , status = \"enabled\" ) Alternatively you can fetch these users page by page using the iter_call method.","title":"List all your LumApps platform users"},{"location":"guides/user_base/#get-a-particular-user","text":"To get a particular user you can do: from lumapps.api.base_client import BaseClient client = BaseClient ( token = \"<your_token>\" ) email = \"<the_user_email>\" user = client . get_call ( \"user/get\" , email = email )","title":"Get a particular user"},{"location":"guides/user_base/#get-the-authenticated-user","text":"To get the user authenticated by the token you provided to the BaseClient you can do: from lumapps.api.base_client import BaseClient client = BaseClient ( token = \"<your_token>\" ) me = client . get_call ( \"user/get\" )","title":"Get the authenticated user"},{"location":"guides/user_base/#create-a-new-user","text":"from lumapps.api.base_client import BaseClient client = BaseClient ( token = \"<your_token>\" ) body = { \"email\" : \"test@test.com\" , \"accountType\" : \"external\" } saved_user = client . get_call ( \"user/save\" , body = body )","title":"Create a new user"},{"location":"guides/user_base/#update-an-existing-user","text":"To update an existing user the best pratice is to get it, modify it and then save it. from lumapps.api.base_client import BaseClient client = BaseClient ( token = \"<your_token>\" ) # Get tge user email = \"<user_email>\" user = client . get_call ( \"user/get\" , email = email ) # Update it user [ \"firstName\" ] = \"Jacques\" # save it saved_user = client . get_call ( \"user/save\" , body = user )","title":"Update an existing user"},{"location":"guides/user_base/#deactivate-a-user","text":"To deactivate a user you need to set his status to disabled from lumapps.api.base_client import BaseClient client = BaseClient ( token = \"<your_token>\" ) # Get tge user email = \"<user_email>\" user = client . get_call ( \"user/get\" , email = email ) # Update his status user [ \"status\" ] = \"disabled\" # save it saved_user = client . get_call ( \"user/save\" , body = user )","title":"Deactivate a user"},{"location":"guides/user_profile/","text":"User profile \u00a4 Profile fields are defined in a User Directory Module and populate through the user customProfile properties. Get user Directory configuration \u00a4 If you have the user directory module id use a content/get call with this id. Else, get a list of user directory modules on an instance. from lumapps.api.base_client import BaseClient client = BaseClient ( token = \"<your_token>\" ) # prepare the request parameters body = { \"instanceId\" : \"xxx\" , \"lang\" : \"en\" , # adapt \"type\" : [ \"user_directory\" ], \"excludeType\" : [ \"community\" , \"custom\" , \"custom_list\" , \"image_gallery\" , \"menu\" , \"news\" , \"news_list\" , \"page\" , \"post\" ], \"action\" : \"CUSTOM_EDIT\" } # get user directory modules list user_directories = client . get_call ( \"content\" , \"list\" , body = body ) The \u0300 user_directories will be a list of user directory modules. Each user directory module has : - a uid = id , we will use it as USER_DIRECTORY_MODULE_ID) - a list of custom profile fields define in template.components , each with an uuid . # example, this user directory module define 2 fields: # - \"Title\" # - \"Phone Number\" { \"title\" : { \"en\" : \"Users Directory\" }, \"id\" : \"6486401110769664\" , \"uid\" : \"6486401110769664\" , \"instance\" : \"6288388086038528\" , \"customer\" : \"4664706704080896\" , \"isDefaultUserDirectory\" : false , \"type\" : \"user_directory\" , \"status\" : \"LIVE\" , \"slug\" : { \"en\" : \"users-directory\" }, \"template\" : { \"components\" : [ { \"uuid\" : \"be3363f3-4df8-4a93-b27c-9c8c69258801\" , \"title\" : { \"en\" : \"Title\" }, \"type\" : \"inputText\" , \"properties\" : { \"index\" : 0 , \"isBound\" : true , \"boundMap\" : { \"text\" : \"organizations/title\" , \"name\" : \"API_PROFILE_FIELD_TITLE\" }, \"icon\" : \"bank\" }, \"status\" : \"LIVE\" , }, { \"uuid\" : \"b72127e4-867a-4aba-a843-70c11dc599ef\" , \"title\" : { \"fr\" : \"Phone Number\" }, \"type\" : \"inputText\" , \"properties\" : { \"editFeeds\" : [], \"availableValues\" : [ {} ], \"icon\" : \"account\" }, \"status\" : \"LIVE\" , } ], \"heritable\" : false , \"createdAt\" : \"2018-04-12T07:43:23.624150\" , \"uid\" : \"\" } } Update the user profile \u00a4 To update the user profile: - get the user details for the corresponding user directory - update or add value for the custom fields defined by the user directory module. - save from lumapps.api.base_client import BaseClient client = BaseClient ( token = \"<your_token>\" ) CUSTOMER_ID = 'XXX' INSTANCE_ID = 'YYY' USER_DIRECTORY_MODULE_ID = '6486401110769664' USER_TO_UPDATE_EMAIL = 'me@customer.com' # get user details corresponding to a user directory module user_to_update = client . get_call ( 'user' , 'directory' , 'get' , email = USER_TO_UPDATE_EMAIL , contentId = USER_DIRECTORY_MODULE_ID ) # keep all user_to_update properties # NB : if `user_to_update` doesn't have the `customProfile` property, add it if \"customProfile\" not in userToUpadte : user_to_update [ 'customProfile' ] = {} # Update the value of \"Title\" (get uid from user directory module definition). field1uid = 'be3363f3-4df8-4a93-b27c-9c8c69258801' user_to_update [ 'customProfile' ][ field1uid ] = 'Support Leader' # Update the value of \"Mobile\" (get uid from user directory module definition). field2uid = 'b72127e4-867a-4aba-a843-70c11dc599ef' user_to_update [ 'customProfile' ][ field2uid ] = '00 11 22 33 44 55 66' # /!\\ To save a user in a user directory # /!\\ you must add the user directory module id in the user object like this: user_to_update [ 'contentId' ] = USER_DIRECTORY_MODULE_ID response = client . get_call ( 'user' , 'directory' , 'save' , body = user_to_update ) # to get more users at once # use `POST user/directory/list body={'contentId':USER_DIRECTORY_MODULE_ID }` users_to_update_list = client . get_call ( 'user' , 'directory' , 'list' , contentId = USER_DIRECTORY_MODULE_ID ) Warning: if the field is defined with a bound value (ex for the \"Title\" above: 'organizations/title' ) the Title value will be store on the user under apiProfile.organization.title else, the value will be store under customProfile.{fielduid} . # example: the response of the previous call { [ ... ] \"email\" : \"me@customer.com\" , \"customProfile\" : { \"b72127e4-867a-4aba-a843-70c11dc599ef\" : \"00 11 22 33 44 55 66\" } [ ... ], \"apiProfile\" : { \"organization\" : { \"title\" : \"Support Leader\" } } }","title":"User Profile"},{"location":"guides/user_profile/#user-profile","text":"Profile fields are defined in a User Directory Module and populate through the user customProfile properties.","title":"User profile"},{"location":"guides/user_profile/#get-user-directory-configuration","text":"If you have the user directory module id use a content/get call with this id. Else, get a list of user directory modules on an instance. from lumapps.api.base_client import BaseClient client = BaseClient ( token = \"<your_token>\" ) # prepare the request parameters body = { \"instanceId\" : \"xxx\" , \"lang\" : \"en\" , # adapt \"type\" : [ \"user_directory\" ], \"excludeType\" : [ \"community\" , \"custom\" , \"custom_list\" , \"image_gallery\" , \"menu\" , \"news\" , \"news_list\" , \"page\" , \"post\" ], \"action\" : \"CUSTOM_EDIT\" } # get user directory modules list user_directories = client . get_call ( \"content\" , \"list\" , body = body ) The \u0300 user_directories will be a list of user directory modules. Each user directory module has : - a uid = id , we will use it as USER_DIRECTORY_MODULE_ID) - a list of custom profile fields define in template.components , each with an uuid . # example, this user directory module define 2 fields: # - \"Title\" # - \"Phone Number\" { \"title\" : { \"en\" : \"Users Directory\" }, \"id\" : \"6486401110769664\" , \"uid\" : \"6486401110769664\" , \"instance\" : \"6288388086038528\" , \"customer\" : \"4664706704080896\" , \"isDefaultUserDirectory\" : false , \"type\" : \"user_directory\" , \"status\" : \"LIVE\" , \"slug\" : { \"en\" : \"users-directory\" }, \"template\" : { \"components\" : [ { \"uuid\" : \"be3363f3-4df8-4a93-b27c-9c8c69258801\" , \"title\" : { \"en\" : \"Title\" }, \"type\" : \"inputText\" , \"properties\" : { \"index\" : 0 , \"isBound\" : true , \"boundMap\" : { \"text\" : \"organizations/title\" , \"name\" : \"API_PROFILE_FIELD_TITLE\" }, \"icon\" : \"bank\" }, \"status\" : \"LIVE\" , }, { \"uuid\" : \"b72127e4-867a-4aba-a843-70c11dc599ef\" , \"title\" : { \"fr\" : \"Phone Number\" }, \"type\" : \"inputText\" , \"properties\" : { \"editFeeds\" : [], \"availableValues\" : [ {} ], \"icon\" : \"account\" }, \"status\" : \"LIVE\" , } ], \"heritable\" : false , \"createdAt\" : \"2018-04-12T07:43:23.624150\" , \"uid\" : \"\" } }","title":"Get user Directory configuration"},{"location":"guides/user_profile/#update-the-user-profile","text":"To update the user profile: - get the user details for the corresponding user directory - update or add value for the custom fields defined by the user directory module. - save from lumapps.api.base_client import BaseClient client = BaseClient ( token = \"<your_token>\" ) CUSTOMER_ID = 'XXX' INSTANCE_ID = 'YYY' USER_DIRECTORY_MODULE_ID = '6486401110769664' USER_TO_UPDATE_EMAIL = 'me@customer.com' # get user details corresponding to a user directory module user_to_update = client . get_call ( 'user' , 'directory' , 'get' , email = USER_TO_UPDATE_EMAIL , contentId = USER_DIRECTORY_MODULE_ID ) # keep all user_to_update properties # NB : if `user_to_update` doesn't have the `customProfile` property, add it if \"customProfile\" not in userToUpadte : user_to_update [ 'customProfile' ] = {} # Update the value of \"Title\" (get uid from user directory module definition). field1uid = 'be3363f3-4df8-4a93-b27c-9c8c69258801' user_to_update [ 'customProfile' ][ field1uid ] = 'Support Leader' # Update the value of \"Mobile\" (get uid from user directory module definition). field2uid = 'b72127e4-867a-4aba-a843-70c11dc599ef' user_to_update [ 'customProfile' ][ field2uid ] = '00 11 22 33 44 55 66' # /!\\ To save a user in a user directory # /!\\ you must add the user directory module id in the user object like this: user_to_update [ 'contentId' ] = USER_DIRECTORY_MODULE_ID response = client . get_call ( 'user' , 'directory' , 'save' , body = user_to_update ) # to get more users at once # use `POST user/directory/list body={'contentId':USER_DIRECTORY_MODULE_ID }` users_to_update_list = client . get_call ( 'user' , 'directory' , 'list' , contentId = USER_DIRECTORY_MODULE_ID ) Warning: if the field is defined with a bound value (ex for the \"Title\" above: 'organizations/title' ) the Title value will be store on the user under apiProfile.organization.title else, the value will be store under customProfile.{fielduid} . # example: the response of the previous call { [ ... ] \"email\" : \"me@customer.com\" , \"customProfile\" : { \"b72127e4-867a-4aba-a843-70c11dc599ef\" : \"00 11 22 33 44 55 66\" } [ ... ], \"apiProfile\" : { \"organization\" : { \"title\" : \"Support Leader\" } } }","title":"Update the user profile"},{"location":"guides/widgets/","text":"Widgets \u00a4 Regular widgets \u00a4 Regular widgets are present in contents, communities and alike. They are in the template > components attribute and can be tricky to get to. To help you with that the sdk expose a set of helpers to easly recuperate and modify widgets. You can find them in lumapps.api.helpers.widgets . The two interresting helpers are find_widget and find_all_widgets . For instance, if you want all widgets of type video present in content you can process as follow: from lumapps.api.base_client import BaseClient from lumapps.api.helpers.widgets import find_all_widgets client = BaseClient ( token = \"<your_token>\" ) # Get the content containing the widgets content = client . get_call ( \"content/get\" , uid = \"fake_id\" ) # Find all widgets having the property widgetType=\"video\" video_widgets = find_all_widgets ( content , widgetType = \"video\" ) You can also use that to modify some widgets. For instance let say we want to modify a widget that we know has an uuid of 454673774 , we would do as follow from lumapps.api.base_client import BaseClient from lumapps.api.helpers.widgets import find_all_widgets client = BaseClient ( token = \"<your_token>\" ) # Get the content containing the widgets content = client . get_call ( \"content/get\" , uid = \"fake_id\" ) # Find the widget that has the uuid 454673774 widget = find_widget ( content , uuid = \"454673774\" ) widget [ \"popertie\" ] = \"new value\" client . get_call ( \"content/save\" , body = content ) Global widgets \u00a4 Global Widgets have one configuration that can be shared with many contents. Global widgets have a dedicated api : \u0300 widget . with this api you can list, get and update global widgets. Global widget list \u00a4 Api widget/list , provide instance id response = api . get_call ( \"widget/list\" , instance = INSTANCE_ID ) # example [ { \"id\" : \"6448894901878784\" , \"uid\" : \"6448894901878784\" , \"instance\" : \"5519565001981952\" , \"customer\" : \"4664706704080896\" , \"widgetType\" : \"html\" , \"uuid\" : \"7ea7407f-149e-489f-b00f-86f49512f555\" , \"title\" : { \"en\" : \"Global Widget\" }, \"properties\" : { \"style\" : { \"footer\" : {}, \"header\" : {} }, \"content\" : { \"en\" : \"<p>global html widget content</p>\" }, \"popin\" : { \"en\" : \"\" }, \"stylesMigrated\" : true , \"global\" : { \"isNew\" : true , \"title\" : { \"en\" : \"Global html widget\" } } }, \"isMainWidget\" : false , \"enabled\" : false , \"isOverride\" : false , \"isGlobal\" : true , \"required\" : false , \"status\" : \"LIVE\" } ] Global widget get \u00a4 Api widget/get , provide widget uid response = api . get_call ( 'widget/get' , uid = \"6448894901878784\" ) # example { \"id\" : \"6448894901878784\" , \"uid\" : \"6448894901878784\" , \"instance\" : \"5519565001981952\" , \"customer\" : \"4664706704080896\" , \"widgetType\" : \"html\" , \"uuid\" : \"7ea7407f-149e-489f-b00f-86f49512f555\" , \"title\" : { \"en\" : \"Global Widget\" }, \"properties\" : { \"style\" : { \"footer\" : {}, \"header\" : {} }, \"content\" : { \"en\" : \"<p>global html widget content</p>\" }, \"popin\" : { \"en\" : \"\" }, \"stylesMigrated\" : true , \"global\" : { \"isNew\" : true , \"title\" : { \"en\" : \"Global html widget\" } } }, \"isMainWidget\" : false , \"enabled\" : false , \"isOverride\" : false , \"isGlobal\" : true , \"required\" : false , \"status\" : \"LIVE\" } global widget save \u00a4 Api widget/save , provide the widget object in the body # First get the object widget = api . get_call ( 'widget/get' , uid = \"6448894901878784\" ) # update some properties widget [ 'properties' ][ 'content' ][ 'en' ] = \"<p>updated content</p>\" # save saved_widget = api . get_call ( 'widget/save' , body = widget )","title":"Widgets"},{"location":"guides/widgets/#widgets","text":"","title":"Widgets"},{"location":"guides/widgets/#regular-widgets","text":"Regular widgets are present in contents, communities and alike. They are in the template > components attribute and can be tricky to get to. To help you with that the sdk expose a set of helpers to easly recuperate and modify widgets. You can find them in lumapps.api.helpers.widgets . The two interresting helpers are find_widget and find_all_widgets . For instance, if you want all widgets of type video present in content you can process as follow: from lumapps.api.base_client import BaseClient from lumapps.api.helpers.widgets import find_all_widgets client = BaseClient ( token = \"<your_token>\" ) # Get the content containing the widgets content = client . get_call ( \"content/get\" , uid = \"fake_id\" ) # Find all widgets having the property widgetType=\"video\" video_widgets = find_all_widgets ( content , widgetType = \"video\" ) You can also use that to modify some widgets. For instance let say we want to modify a widget that we know has an uuid of 454673774 , we would do as follow from lumapps.api.base_client import BaseClient from lumapps.api.helpers.widgets import find_all_widgets client = BaseClient ( token = \"<your_token>\" ) # Get the content containing the widgets content = client . get_call ( \"content/get\" , uid = \"fake_id\" ) # Find the widget that has the uuid 454673774 widget = find_widget ( content , uuid = \"454673774\" ) widget [ \"popertie\" ] = \"new value\" client . get_call ( \"content/save\" , body = content )","title":"Regular widgets"},{"location":"guides/widgets/#global-widgets","text":"Global Widgets have one configuration that can be shared with many contents. Global widgets have a dedicated api : \u0300 widget . with this api you can list, get and update global widgets.","title":"Global widgets"},{"location":"guides/widgets/#global-widget-list","text":"Api widget/list , provide instance id response = api . get_call ( \"widget/list\" , instance = INSTANCE_ID ) # example [ { \"id\" : \"6448894901878784\" , \"uid\" : \"6448894901878784\" , \"instance\" : \"5519565001981952\" , \"customer\" : \"4664706704080896\" , \"widgetType\" : \"html\" , \"uuid\" : \"7ea7407f-149e-489f-b00f-86f49512f555\" , \"title\" : { \"en\" : \"Global Widget\" }, \"properties\" : { \"style\" : { \"footer\" : {}, \"header\" : {} }, \"content\" : { \"en\" : \"<p>global html widget content</p>\" }, \"popin\" : { \"en\" : \"\" }, \"stylesMigrated\" : true , \"global\" : { \"isNew\" : true , \"title\" : { \"en\" : \"Global html widget\" } } }, \"isMainWidget\" : false , \"enabled\" : false , \"isOverride\" : false , \"isGlobal\" : true , \"required\" : false , \"status\" : \"LIVE\" } ]","title":"Global widget list"},{"location":"guides/widgets/#global-widget-get","text":"Api widget/get , provide widget uid response = api . get_call ( 'widget/get' , uid = \"6448894901878784\" ) # example { \"id\" : \"6448894901878784\" , \"uid\" : \"6448894901878784\" , \"instance\" : \"5519565001981952\" , \"customer\" : \"4664706704080896\" , \"widgetType\" : \"html\" , \"uuid\" : \"7ea7407f-149e-489f-b00f-86f49512f555\" , \"title\" : { \"en\" : \"Global Widget\" }, \"properties\" : { \"style\" : { \"footer\" : {}, \"header\" : {} }, \"content\" : { \"en\" : \"<p>global html widget content</p>\" }, \"popin\" : { \"en\" : \"\" }, \"stylesMigrated\" : true , \"global\" : { \"isNew\" : true , \"title\" : { \"en\" : \"Global html widget\" } } }, \"isMainWidget\" : false , \"enabled\" : false , \"isOverride\" : false , \"isGlobal\" : true , \"required\" : false , \"status\" : \"LIVE\" }","title":"Global widget get"},{"location":"guides/widgets/#global-widget-save","text":"Api widget/save , provide the widget object in the body # First get the object widget = api . get_call ( 'widget/get' , uid = \"6448894901878784\" ) # update some properties widget [ 'properties' ][ 'content' ][ 'en' ] = \"<p>updated content</p>\" # save saved_widget = api . get_call ( 'widget/save' , body = widget )","title":"global widget save"}]}